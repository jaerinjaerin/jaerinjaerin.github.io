<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1부터 N까지의 원소를 갖는 집합의 부분집합 구하기</title>
    <url>/2022/221007-archive/</url>
    <content><![CDATA[<h2 id="✏️-문제"><a href="#✏️-문제" class="headerlink" title="✏️  문제"></a>✏️  문제</h2><p>자연수 N이 주어지면 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력하는 프로그램을 작성하세요.</p>
<p>입력설명<br>첫 번째 줄에 자연수 N(1 ≤ N ≤ 10)이 주어집니다. </p>
<p>출력 설명<br>첫 번째 줄부터 각 줄에 하나씩 부분집합을 출력예제와 같은 순서로 출력한다.</p>
<p>입력 예제</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>출력 예제</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>


<h3 id="👉-부분-집합을-구하는-문제"><a href="#👉-부분-집합을-구하는-문제" class="headerlink" title="👉 부분 집합을 구하는 문제"></a>👉 부분 집합을 구하는 문제</h3><p>1을 방문을 할 지 안 할지 2가지 선택, 2를 방문을 할 지 안 할지 2가지 선택, 3을 방문을 할 지 안 할지 2가지 선택<br>➡️  총 8가지의 트리가 만들어진다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">상태트리</span><br><span class="line"></span><br><span class="line">부분집합의 개수 <span class="number">2</span> ^ x - <span class="number">1</span> (공집합 제외)</span><br><span class="line">집합에 원소가 들어갈지 안들어갈지 선택한다.</span><br><span class="line"></span><br><span class="line"><span class="title function_">D</span>(<span class="number">1</span>) -&gt; O -&gt; <span class="title function_">D</span>(<span class="number">2</span>) -&gt; o -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">                  -&gt; x -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">     -&gt; X -&gt; <span class="title function_">D</span>(<span class="number">2</span>) -&gt; o -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">                  -&gt; x -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br></pre></td></tr></table></figure>

<p>문제에서 1부터 N까지의 원소를 갖는 부분집합을 구하라고 했기 때문에, 1부터 N까지의 길이에 0을 담은 체크 배열을 만들어준다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> checkArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>이제 Head 노드에서부터 노드를 방문하면서, 해당 노드를 포함할 것인지 확인하고, 부분 집합을 찾아준다.</p>
<p>(내가 만든 부분 집합에 참여시키고 참여시키지않는 것을 확인 후 배열에 하나씩 담아주면 된다.)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === n + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 1로 들어온 것들만 출력하기</span></span><br><span class="line">        <span class="keyword">if</span> (checkArray[i] === <span class="number">1</span>) temp += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">length</span> &gt;= <span class="number">1</span>) answer.<span class="title function_">push</span>(temp.<span class="title function_">trim</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 집합에 포함시킨다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 집합에 포함시키지 않는다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">0</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<h3 id="👉-DFS-함수를-잘-살펴보자"><a href="#👉-DFS-함수를-잘-살펴보자" class="headerlink" title="👉  DFS 함수를 잘 살펴보자"></a>👉  DFS 함수를 잘 살펴보자</h3><ol>
<li>부분집합이 주어진 배열의 길이를 넘어갈 수는 없으므로, depth가 배열의 길이와 같다면 재귀를 멈추고, 1로 들어온 인덱스만 출력한다.</li>
<li>depth가 아직 배열의 길이에 도달하지 않으면, 자기 자식 노드를 선택하는 경우와 그렇지 않은 경우를 만들고, 자식을 호출하여 부분집합을 찾아간다.</li>
</ol>
<h3 id="✅-전체-코드"><a href="#✅-전체-코드" class="headerlink" title="✅ 전체 코드"></a>✅ 전체 코드</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [];</span><br><span class="line">  <span class="keyword">let</span> checkArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === n + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 1로 들어온 것들만 출력하기</span></span><br><span class="line">        <span class="keyword">if</span> (checkArray[i] === <span class="number">1</span>) temp += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">length</span> &gt;= <span class="number">1</span>) answer.<span class="title function_">push</span>(temp.<span class="title function_">trim</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 집합에 포함시킨다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 집합에 포함시키지 않는다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">0</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">DFS</span>(<span class="number">1</span>); <span class="comment">// DFS는 1부터 시작한다.</span></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>DFS를 사용하려면 재귀함수가 기본적인 지식으로 깔려 있어야하는 것 같다. 재귀함수를 배웠다고 생각했는데 막상 그것도 아닌가보다. 😟 DFS가 실행되는 과정에 대해서 더 이해하는 과정이 필요할 것 같다. 부분집합을 구하라는 문제를 봤을 때, 어떻게 구해야하지 라고 생각하다가 가지치기 형식으로 그림을 그리다보니 이진트리 형태로 나오는 것을 보면서 이러면 이진트리로 접근해야겠다. 라는 생각이 들었던 것만으로도 오늘은 성공인것 같다!</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>실행 컨텍스트 - 실행 컨텍스트가 하는 역할이 무엇일까?</title>
    <url>/2022/221012-archive/</url>
    <content><![CDATA[<p>자바스크립트 Deep Dive를 공부하고 정리해보자 :)<br>실행 컨텍스트가 무슨 역할을 하는지에 대해서 알아보자.</p>
<h2 id="소스코드의-타입"><a href="#소스코드의-타입" class="headerlink" title="소스코드의 타입"></a>소스코드의 타입</h2><p>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다.</p>
<p>4가지 타입의 소스코드는 실행 컨텍스트를 생성한다.</p>
<table>
<thead>
<tr>
<th>소스코드의 타입</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>전역 코드</td>
<td>전역에 존재하는 소스코드를 말한다.</td>
</tr>
<tr>
<td>전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>
<td></td>
</tr>
<tr>
<td>함수 코드</td>
<td>함수 내부에 존재하는 소스코드를 말한다.</td>
</tr>
<tr>
<td>함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>
<td></td>
</tr>
<tr>
<td>eval 코드</td>
<td>빌트인 전역 함수인 [[eval 함수]]에 인수로 전달되어 실행되는 소스코드를 말한다.</td>
</tr>
<tr>
<td>모듈 코드</td>
<td>모듈 내부에 존재하는 소스코드를 말한다.</td>
</tr>
<tr>
<td>모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>
<td></td>
</tr>
</tbody></table>
<h3 id="소스코드를-4가지-타입으로-구분하는-이유"><a href="#소스코드를-4가지-타입으로-구분하는-이유" class="headerlink" title="소스코드를 4가지 타입으로 구분하는 이유"></a><strong>소스코드를 4가지 타입으로 구분하는 이유</strong></h3><p>소스코드의 타입에 따라 실행 컨텍스트를 실행하는 과정과 관리 내용이 다르기 때문이다.</p>
<h3 id="전역-코드"><a href="#전역-코드" class="headerlink" title="전역 코드"></a><strong>전역 코드</strong></h3><ul>
<li>전역 코드는 전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야 한다.</li>
<li>그리고 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다. 👉 이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 생성된다.</li>
</ul>
<h3 id="함수-코드"><a href="#함수-코드" class="headerlink" title="함수 코드"></a><strong>함수 코드</strong></h3><ul>
<li>함수 코드는 지역 스코프를 생성</li>
<li>지역 변수, 매개변수, arguments 객체를 관리해야 한다.</li>
<li>그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체이의 일원으로 연결해야 한다.</li>
</ul>
<p>👉 이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 생성된다.</p>
<h3 id="eval-코드"><a href="#eval-코드" class="headerlink" title="eval 코드"></a>eval 코드</h3><ul>
<li>strict mode에서 자신만의 독자적인 스코프를 생성한다.</li>
</ul>
<p>👉 이를 위해 eval 코드가 평가되면 eval 실행 컨텍스트가 생성된다.</p>
<h3 id="모듈-코드"><a href="#모듈-코드" class="headerlink" title="모듈 코드"></a>모듈 코드</h3><ul>
<li>모듈 코드는 모듈별로 독자적인 모듈 스코프를 생성한다.</li>
</ul>
<p>👉 이를 위해 모듈 코드가 평가되면 함수 실행 컨텍스트가 생성된다.</p>
<h2 id="소스코드의-평가와-실행"><a href="#소스코드의-평가와-실행" class="headerlink" title="소스코드의 평가와 실행"></a>소스코드의 평가와 실행</h2><p>모든 소스코드는 실행에 앞서 <strong>평가 과정</strong>을 거치며 코드를 실행하기 위한 준비를 한다.</p>
<p>👉 <em>즉, 자바스크립트 엔진은 2개의 과정으로 나누어 처리한다.</em></p>
<h3 id="소스코드의-평가-과정"><a href="#소스코드의-평가-과정" class="headerlink" title="소스코드의 평가 과정"></a>소스코드의 평가 과정</h3><ul>
<li><p><strong>실행 컨텍스트</strong>를 생성</p>
</li>
<li><p>변수, 함수 등의 선언문만 먼저 실행</p>
<p>  👉 생성된 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프에 등록한다.</p>
</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Ffbef7e69-646e-444f-86c6-86c6fe64c8df%2Fjavascript-context01.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Ffbef7e69-646e-444f-86c6-86c6fe64c8df%2Fjavascript-context01.png"></p>
<h3 id="소스코드-평가-과정이-끝나면-소스코드가-순차적으로-실행되기-시작한다"><a href="#소스코드-평가-과정이-끝나면-소스코드가-순차적으로-실행되기-시작한다" class="headerlink" title="소스코드 평가 과정이 끝나면 소스코드가 순차적으로 실행되기 시작한다."></a>소스코드 평가 과정이 끝나면 소스코드가 순차적으로 실행되기 시작한다.</h3><p>👉 즉, 런타임이 시작된다.</p>
<ul>
<li>소스코드 실행에 필요한 정보<ul>
<li>변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다.</li>
</ul>
</li>
<li>변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다.</li>
</ul>
<p>예를 들어, 다음과 같은 소스코드가 실행된다고 생각해보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>🙌🏻 <strong>자바스크립트 엔진은 위 예제를 2개의 과정으로 나누어 처리한다.</strong></p>
<ol>
<li>소스코드 평가 과정에서 변수 선언문 <strong>var x</strong>를 먼저 실행한다.<ol>
<li>이때 생성된 변수 식별자 x는 실행 컨텍스트가 관리하는 <strong>스코프에 등록</strong></li>
<li>undefined로 초기화</li>
</ol>
</li>
<li>소스코드 평가 과정이 끝나면 소스코드 실행 과정이 시작된다.<ol>
<li>변수 할당문 x &#x3D; 1 만 실행한다.</li>
<li>이때 x 변수에 값을 할당하려면 먼저 x 변수가 선언된 변수인지 확인해야 한다.</li>
<li>이를 위해 실행 컨텍스트가 관리하는 스코프에 x 변수가 등록되어 있는지 확인한다.</li>
</ol>
</li>
</ol>
<h2 id="실행-컨텍스트의-역할"><a href="#실행-컨텍스트의-역할" class="headerlink" title="실행 컨텍스트의 역할"></a>실행 컨텍스트의 역할</h2><p>🙌🏻 전역 코드와 함수 코드로 구성되어 있는 예제를 살펴보면서 자바스크립트 엔진이 이 예제를 어떻게 평가하고 실행할지 생각해보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 전역 변수 선언</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 정의</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// 지역 변수 선언</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 메서드 호출</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + x + y); <span class="comment">// 130</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 호출</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 메서드 호출</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x + y); <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-전역-코드-평가"><a href="#1-전역-코드-평가" class="headerlink" title="1. 전역 코드 평가"></a>1. 전역 코드 평가</h3><ul>
<li><p>전역 코드를 실행하기 앞서 평가 과정을 거치며 “전역 코드를 실행할 준비”를 한다.</p>
</li>
<li><p>소스코드 평가 과정에서는 선언문만 먼저 실행한다.</p>
</li>
<li><p>따라서 전역 코드의 변수 선언문과 함수 선언문이 먼저 실행</p>
<p>  👉 <strong>생성된 전역 변수와 전역 함수가 실행 컨텍스트가 관리하는 전역 스코프</strong>에 등록된다.</p>
</li>
<li><p>이때 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수</p>
<p>  👉 전역 객체의 프로퍼티와 메서드가 된다.</p>
</li>
</ul>
<h3 id="2-전역-코드-실행"><a href="#2-전역-코드-실행" class="headerlink" title="2. 전역 코드 실행"></a>2. 전역 코드 실행</h3><ul>
<li>평가 과정이 끝나면 런타임이 시작되어 전역 코드가 순차적으로 실행된다.</li>
<li>이때 전역 변수에 값이 할당되고 함수가 호출된다.</li>
<li>함수가 호출되면 전역 코드의 실행을 일시 중단하고 함수 내부로 진입한다.</li>
</ul>
<h3 id="3-함수-코드-평가"><a href="#3-함수-코드-평가" class="headerlink" title="3. 함수 코드 평가"></a>3. 함수 코드 평가</h3><ul>
<li><p>함수 내부로 진입하면 함수 내부의 문들을 실행하기 앞서 함수 코드 평가 과정을 거친다.</p>
<p>  👉 함수 코드를 실행하기 위한 준비</p>
</li>
<li><p>이때 매개변수와 지역 변수 선언문이 먼저 실행</p>
<p>  👉 <strong>생성된 매개변수와 지역 변수가 실행 컨텍스트가 관리하는 지역 스코프</strong>에 등록된다.</p>
</li>
<li><p>또한 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성</p>
<p>  👉 지역 스코프에 등록되고 this 바인딩도 결정된다.</p>
</li>
</ul>
<h3 id="4-함수-코드-실행"><a href="#4-함수-코드-실행" class="headerlink" title="4. 함수 코드 실행"></a>4. 함수 코드 실행</h3><ul>
<li><p>함수 코드 평가 과정이 끝나면 런타임이 시작되어 순차적으로 실행되기 시작</p>
</li>
<li><p>이때 매개변수와 지역 변수에 값이 할당되고, console.log 메서드가 호출된다.</p>
</li>
<li><p>console.log 메서드를 호출하기 위해서</p>
<ol>
<li><p>식별자인 console을 스코프 체인을 통해 검색<br>  : 이를 위해 함수 코드의 지역 스코프는 상위 스코프인 전역 스코프와 연결되어야 하지만 console 식별자는 스코프 체인에 등록되어 있지 않고 <strong>전역 객체 프로퍼티</strong>로 존재한다.<br>  👉 전역 객체 프로퍼티가 마치 전역 변수처럼 전역 스코프를 통해 검색 가능하다는 것을 의미한다.</p>
</li>
<li><p>log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색</p>
<p> : 그 후 console.log 메서드에 인수로 전달된 표현식 a + x + y가 평가된다.</p>
</li>
</ol>
</li>
<li><p>console.log 메서드 실행이 종료되면 함수 코드 실행 과정이 종료</p>
</li>
<li><p>함수 호출 이전으로 되돌아가 전역 코드 실행을 계속한다.</p>
</li>
</ul>
<p>코드가 실행되려면 스코프를 구분하여 식별자와 바인딩된 값이 관리되어야 한다. 그리고 <strong>중첩 관계에 의해 스코프 체인을 형성</strong>하여 식별자를 검색할 수 있어야 하고, 전역 객체의 프로퍼티도 전역 변수처럼 검색할 수 있어야 한다.</p>
<p>또한 함수 호출이 종료되면 함수 호출 이전으로 되돌아가기 위해 현재 실행 중인 코드와 이전에 실행하던 코드를 구분하여 관리해야 한다.</p>
<h3 id="✏️-코드가-실행되려면-다음과-같이-스코프-식별자-코드-실행-순서-등의-관리가-필요하다"><a href="#✏️-코드가-실행되려면-다음과-같이-스코프-식별자-코드-실행-순서-등의-관리가-필요하다" class="headerlink" title="✏️ 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다."></a>✏️ 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.</h3><ol>
<li>선언에 의해 생성된 모든 식별자를 스코프를 구분하여 등록하고, 상태 변화를 지속적으로 관리할 수 있어야 한다.</li>
<li>스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다.<ol>
<li>즉, <strong>스코프 체인</strong>을 통해 상위 스코프로 이동하여 식별자를 검색할 수 있어야 한다.</li>
</ol>
</li>
<li>현재 실행 중인 코드의 실행 순서를 변경할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.</li>
</ol>
<p>이 모든 것을 관리하는 것이 실행 컨텍스트다.</p>
<h3 id="✅-실행-컨텍스트"><a href="#✅-실행-컨텍스트" class="headerlink" title="✅ 실행 컨텍스트"></a>✅ 실행 컨텍스트</h3><p>: 소스코드를 <strong>실행하는 데 필요한 환경을 제공</strong>하고 코드의 실행 결과를 <strong>실제로 관리</strong>하는 영역</p>
<p>식별자(변수, 함수, 클래스 등의 이름)을 등록하고 관리하는 <strong>스코프와 코드 실행 순서 관리를 구현한 내부 매커니즘</strong></p>
<p><strong>💡 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.</strong></p>
<ul>
<li>식별자와 스코프: 실행 컨텍스트의 <strong>렉시컬 환경</strong>으로 관리</li>
<li>코드 실행 순서: <strong>실행 컨텍스트 스택</strong>으로 관리</li>
</ul>
<hr>
<h2 id="😎-정리하면서-배운-점"><a href="#😎-정리하면서-배운-점" class="headerlink" title="😎 정리하면서 배운 점"></a>😎 정리하면서 배운 점</h2><p>실행 컨텍스트는 소스코드를 실행하고 관리하는 영역이라는 것에 대해서 알게되었다.<br>모든 코드는 실행 컨텍스트에 의해 실행되고 관리된다는 점을 잊지말자.</p>
<p>렉시컬 환경이 무엇이고, 실행 컨텍스트가 무엇인지 매번 들을 때마다 나중에 공부해야지 생각했는데 드디어 공부해야할 때가 온 것 같다.</p>
<p>렉시컬 스코프, 렉시컬 환경, 실행 컨텍스트 스택에 대해서는 다음 블로그에서 알아보자 :)</p>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DeepDive</tag>
      </tags>
  </entry>
  <entry>
    <title>후위연산식(postfix)</title>
    <url>/2022/221014-archive/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>후위연산식이 주어지면 연산한 결과를 출력하는 프로그램을 작성하세요.</p>
<p>만약 3*(5+2)-9 을 후위연산식으로 표현하면 352+*9- 로 표현되며 그 결과는 12입니다.</p>
<h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫 줄에 후위연산식이 주어집니다. 연산식의 길이는 50을 넘지 않습니다. </p>
<p>식은 1~9의 숫자와 +, -, *, &#x2F; 연산자로만 이루어진다.</p>
<h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>연산한 결과를 출력합니다.</p>
<h3 id="예제입력"><a href="#예제입력" class="headerlink" title="예제입력"></a>예제입력</h3><p>▣ 입력예제 1 </p>
<p>352+*9-</p>
<p>▣ 출력예제 1 </p>
<p>12</p>
<hr>
<h2 id="🙌🏻-문제-이해하기"><a href="#🙌🏻-문제-이해하기" class="headerlink" title="🙌🏻 문제 이해하기"></a>🙌🏻 문제 이해하기</h2><p>문제를 해결하기 위해 어떤 방법을 사용해야하는지 생각해보자 :)</p>
<ol>
<li>문자열로 받은 argument를 하나씩 확인해야한다. ➡️ split 메서드 사용하여 배열로 만들기</li>
<li>반복문으로 순회를 하면서 숫자를 만나면 stack에 넣는다. </li>
<li>연산자를 만나면 stack에서 2개의 값을 꺼내 계산한다. </li>
<li>계산한 값을 다시 stack에 넣는다. </li>
<li>반복문이 종료되었을 때 계산된 값을 반환한다.</li>
</ol>
<h2 id="✅-solution"><a href="#✅-solution" class="headerlink" title="✅ solution"></a>✅ solution</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> array = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(item)) stack.<span class="title function_">push</span>(<span class="title class_">Number</span>(item));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> right = stack.<span class="title function_">pop</span>();</span><br><span class="line">      <span class="keyword">let</span> left = stack.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (item) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left * right);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left + right);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left - right);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left / right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Number</span>(stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">solution</span>(<span class="string">&quot;352+*9-&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>이번 문제는 어떻게 풀지만 알고 있으면 쉽게 구현할 수 있는 문제인 것 같았다. </p>
<p>풀면서 오류를 범했던 것이 있다면 stack에 넣을 값을 숫자로 변환하지 않고 그대로 넣어서 결과값이 147이 나와 깜짝 놀랬다는 것… (앗차차 나의 실수😃)</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>실행 컨텍스트 스택</title>
    <url>/2022/221014-1-archive/</url>
    <content><![CDATA[<p>📚 실행 컨텍스트 스택의 의미에 대해서 알아보고,<br>실행 컨텍스트 스택 안에서 실행 컨텍스트가 어떻게 실행되는지 공부해보자:)</p>
<p>🙌🏻 다음 예제를 살펴보자</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">3</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">// 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>전역 코드와 함수 코드로 이루어져 있다.</li>
<li>자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성</li>
<li>함수가 호출되면 함수 코드를 평가하여 함수 실행 컨텍스트를 생성</li>
</ul>
<p>생성된 실행 컨텍스트는 스택 자료구조로 관리된다. 👉 <strong>실행 컨텍스트 스택</strong></p>
<p>위 코드를 실행하면 아래와 같이 실행 컨텍스트 스택(Stack)이 생성하고 소멸한다.</p>
<p>현재 실행 중인 컨텍스트에서 이 컨텍스트와 관련없는 코드(예를 들어 다른 함수)가 실행되면 새로운 컨텍스트가 생성된다. 이 컨텍스트는 스택에 쌓이게 되고 컨트롤(제어권)이 이동한다.</p>
<p><img src="https://poiemaweb.com/img/ec_1.png" alt="https://poiemaweb.com/img/ec_1.png"></p>
<h3 id="1-전역-코드-평가와-실행"><a href="#1-전역-코드-평가와-실행" class="headerlink" title="1. 전역 코드 평가와 실행"></a>1. 전역 코드 평가와 실행</h3><ul>
<li>자바스크립트 엔진은 먼저 전역 코드를 평가하여 전역 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시한다.</li>
<li>전역 변수 x와 전역 함수 foo는 전역 실행 컨텍스트에 등록됨</li>
<li>전역 코드가 실행되면 👉 전역 변수 x에 값이 할당되고 전역 함수 foo가 실행</li>
</ul>
<h3 id="2-foo-함수-코드의-평가와-실행"><a href="#2-foo-함수-코드의-평가와-실행" class="headerlink" title="2. foo 함수 코드의 평가와 실행"></a>2. foo 함수 코드의 평가와 실행</h3><ul>
<li>함수 foo가 호출되면 전역 코드의 실행은 일시 중단되고 <strong>코드의 제어권</strong>이 foo 함수 내부로 이동</li>
<li>자바스크립트 엔진은 foo 함수 내부의 함수 코드를 평가하여 foo 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시</li>
<li>이때 foo 함수의 지역 변수 y와 중첩 함수 bar가 foo 함수 실행 컨텍스트에 등록됨</li>
<li>이후 foo 함수 코드가 실행되면 👉 지역 변수 y에 값이 할당되고 중첩 함수 bar가 실행</li>
</ul>
<h3 id="3-bar-함수-코드의-평가와-실행"><a href="#3-bar-함수-코드의-평가와-실행" class="headerlink" title="3. bar 함수 코드의 평가와 실행"></a>3. bar 함수 코드의 평가와 실행</h3><ul>
<li>중첩 함수 bar가 호출되면 foo 함수 코드 실행은 중단되고 코드의 제어권이 bar 함수 내부로 이동</li>
<li>자바스크립트 엔진은 bar 함수 내부의 함수 코드를 평가하여 bar 함수 실행 컨텍스트를 생성하고 실행 컨텍스트 스택에 푸시</li>
<li>지역 변수 z와 bar가 bar 함수 실행 컨텍스트에 등록됨</li>
<li>bar 함수가 실행되면 👉 지역 변수 z에 값이 할당되고 console.log 메서드를 호출한 이후 bar 함수 종료</li>
</ul>
<h3 id="4-foo-함수-코드로-복귀"><a href="#4-foo-함수-코드로-복귀" class="headerlink" title="4. foo 함수 코드로 복귀"></a>4. foo 함수 코드로 복귀</h3><ul>
<li>bar 함수가 종료되면 코드의 제어권을 foo 함수로 이동</li>
<li>자바스크립트 엔진은 bar 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거</li>
<li>foo 함수는 더 이상 실행할 코드가 없으므로 종료</li>
</ul>
<h3 id="5-전역-코드로-복귀"><a href="#5-전역-코드로-복귀" class="headerlink" title="5. 전역 코드로 복귀"></a>5. 전역 코드로 복귀</h3><ul>
<li>foo 함수가 종료되면 코드의 제어권은 다시 전역 코드로 이동</li>
<li>자바스크립트 엔진은 foo 함수 실행 컨텍스트를 실행 컨텍스트 스택에서 팝하여 제거</li>
<li>더 이상 실행할 전역 코드가 남아 있지 않으므로 전역 실행 컨텍스트도 실행 컨텍스트 스택에서 팝되어 제거</li>
<li>실행 컨텍스트 스택에는 아무것도 남아있지 않음</li>
</ul>
<p><strong>👉 이처럼 실행 컨텍스트 스택은 코드의 실행 순서를 관리한다.</strong></p>
<ul>
<li>소스코드가 평가되면 실행 컨텍스트가 생성 → 실행 컨텍스트 스택의 최상위에 쌓인다.</li>
<li>따라서 실행 컨텍스트 스택의 최상위에 존재하는 실행 컨텍스트를 <strong>실행 중인 실행 컨텍스트( running execution context)</strong> 라 부른다.</li>
</ul>
<h2 id="렉시컬-환경"><a href="#렉시컬-환경" class="headerlink" title="렉시컬 환경"></a>렉시컬 환경</h2><h3 id="✅-렉시컬-환경"><a href="#✅-렉시컬-환경" class="headerlink" title="✅ 렉시컬 환경"></a>✅ 렉시컬 환경</h3><p>: 식별자와 식별자에 바인딩된 값, 그리고 상위 스코프에 대한 참조를 기록하는 자료구조, 실행 컨텍스트를 구성하는 컴포넌트</p>
<p><img src="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F8697dd5f-901c-4017-b0b2-d7e10c0c2888%2Fimage.png" alt="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F8697dd5f-901c-4017-b0b2-d7e10c0c2888%2Fimage.png"></p>
<ul>
<li>실행 컨텍스트 스택: <strong>코드의 실행순서를 관리</strong>한다면</li>
<li>렉시컬 환경: <strong>스코프와 식별자</strong>를 관리한다.</li>
<li>키와 값을 갖는 객체 형태의 스코프를 생성 (전역, 함수, 블록 스코프) 👉 식별자를 키로 등록하고 식별자에 바인딩된 값을 관리</li>
</ul>
<p><strong>렉시컬 환경은 스코프를 구분하여 식별자를 등록하고 관리하는 저장소 역할을 하는 렉시컬 스코프의 실체</strong></p>
<h3 id="실행-컨텍스트의-구성"><a href="#실행-컨텍스트의-구성" class="headerlink" title="실행 컨텍스트의 구성"></a>실행 컨텍스트의 구성</h3><ul>
<li>LexicalEnvironment Component</li>
<li>VariableEnvironment Component</li>
</ul>
<p><strong>생성 초기</strong> 👉 LexicalEnvironment 컴포넌트와 VariableEnvironment 컴포넌트는 하나의 동일한 렉시컬 환경을  참조</p>
<p><strong>이후 몇 가지 상황을 만나면 👉</strong> VariableEnvironment 컴포넌트를 위한 새로운 렉시컬 환경을 생성한다.</p>
<p>이때부터 VariableEnvironment 컴포넌트와 LexicalEnvironment 컴포넌트는 내용이 달라지는 경우도 있다.</p>
<h3 id="렉시컬-환경의-구성"><a href="#렉시컬-환경의-구성" class="headerlink" title="렉시컬 환경의 구성"></a>렉시컬 환경의 구성</h3><p>렉시컬 환경은 두 개의 컴포넌트로 구성된다.</p>
<ul>
<li>Environment Record (환경 레코드)</li>
<li>Outer Lexical Environment Reference (외부 렉시컬 환경에 대한 참조)</li>
</ul>
<p>✏️ <strong>환경 레코드</strong></p>
<ul>
<li>스코프에 포함된 식별자를 등록하고 등록된 식별자에 바인딩된 값을 관리하는 저장소</li>
<li>환경 레코드는 소스코드의 타입에 따라 관리하는 내용에 차이가 있다.</li>
</ul>
<p>✏️ <strong>외부 렉시컬 환경에 대한 참조</strong></p>
<ul>
<li>외부 렉시컬 환경에 대한 참조는 상위 스코프를 가리킨다.</li>
<li>상위 스코프란 외부 렉시컬 환경 👉 즉, 해당 실행 컨텍스트를 생성한 소스코드를 포함하는 상위 코드의 렉시컬 환경</li>
<li>외부 렉시컬 환경에 대한 참조를 통해 <strong>단방향 링크드 리스트인 스코프 체인</strong>을 구현</li>
</ul>
<h2 id="실행-컨텍스트와-블록-레벨-스코프"><a href="#실행-컨텍스트와-블록-레벨-스코프" class="headerlink" title="실행 컨텍스트와 블록 레벨 스코프"></a>실행 컨텍스트와 블록 레벨 스코프</h2><p>🔥 어떻게 실행 컨텍스트가 생성되는가? (실행 컨텍스트 생성 과정)<br>🔥 어떻게 코드 실행 결과가 관리되는가?<br>🔥 어떻게 실행 컨테스트를 통해 식별자를 검색하는가?</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (a) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span> (b) &#123;</span><br><span class="line">    <span class="keyword">const</span> z = <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + x + y + z);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="title function_">bar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">20</span>); <span class="comment">// 42</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-전역-객체-생성"><a href="#1-전역-객체-생성" class="headerlink" title="1. 전역 객체 생성"></a>1. 전역 객체 생성</h3><ul>
<li>전역 객체는 전역 코드가 평가되기 이전에 생성된다.</li>
<li>이때 전역 객체에 생성되는 것<ul>
<li>빌트인 전역 프로퍼티</li>
<li>빌트인 전역 함수</li>
<li>표준 빌트인 객체</li>
<li>동작 환경에 따라 클라이언트 사이드 Web API 또는 특정 환경을 위한 호스트 객체 포함</li>
</ul>
</li>
<li>전역 객체도 Object.portotype을 상속 받는다. 👉 전역 객체도 프로토타입 체인의 일원</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.prototype.toString</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">toString</span>(); <span class="comment">// -&gt; &quot;[object Window]&quot;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-전역-코드-평가"><a href="#2-전역-코드-평가" class="headerlink" title="2. 전역 코드 평가"></a>2. 전역 코드 평가</h3><ul>
<li>소스코드가 로드되면 자바스크립트 엔진은 전역 코드를 평가</li>
<li>전역 코드 평가 순서<ol>
<li><strong>전역 실행 컨텍스트 생성</strong></li>
<li><strong>전역 렉시컬 환경 생성</strong><ol>
<li>전역 <strong>환경 레코드</strong> 생성<ol>
<li>객체 환경 레코드 생성</li>
<li>선언적 환경 레코드 생성</li>
</ol>
</li>
<li>this 바인딩</li>
<li><strong>외부 렉시컬 환경에 대한 참조</strong> 결정</li>
</ol>
</li>
</ol>
</li>
</ul>
<p>🙌🏻 위 과정을 거쳐 생성된 전역 실행 컨텍스트와 렉시컬 환경은 아래 그림과 같다.</p>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F80500ef0-a74a-41f9-abfe-d5d9277a664f%2Fjavascript-context08.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F80500ef0-a74a-41f9-abfe-d5d9277a664f%2Fjavascript-context08.png"></p>
<p>📚 <strong>세부적인 생성 과정 살펴보기</strong></p>
<p><strong>1. 전역 실행 컨텍스트 생성</strong></p>
<ul>
<li>먼저 비어있는 전역 실행 컨텍스트를 생성하여 실행 컨텍스트 스택에 push</li>
<li>이때 전역 실행 컨텍스트는 running execution context가 된다.</li>
</ul>
<p><strong>2. 전역 렉시컬 환경 생성</strong></p>
<ul>
<li>전역 렉시컬 환경을 생성하고 전역 실행 컨텍스트에 <strong>바인딩</strong>한다.</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Fbc8bca2e-04e7-4533-b8bd-e58b79f770e3%2Fjavascript-context06.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Fbc8bca2e-04e7-4533-b8bd-e58b79f770e3%2Fjavascript-context06.png"></p>
<ul>
<li><p>렉시컬 환경은 2개의 컴포넌트, <strong>환경 레코드</strong>와 <strong>외부 렉시컬 환경에 대한 참조</strong>로 구성된다.</p>
<p>  <strong>2.1. 전역 환경 레코드 생성</strong></p>
<ul>
<li><p>전역 환경 레코드: 전역 렉시컬 환경을 구성하는 컴포넌트</p>
</li>
<li><p>전역 환경 레코드가 제공하는 것</p>
<ul>
<li>전역 변수를 관리하는 전역 스코프</li>
<li>전역 객체의 빌트인 전역 프로퍼티</li>
<li>빌트인 전역 함수</li>
<li>표준 빌트인 객체</li>
</ul>
</li>
<li><p>ES6 이전</p>
<ul>
<li>모든 전역 변수가 전역 객체의 프로퍼티</li>
<li>전역 객체가 전역 환경 레코드의 역할을 수행함</li>
</ul>
</li>
<li><p>ES6</p>
<ul>
<li><p>전역 환경 레코드 : let, const 키워드로 선언한 전역 변수를 구분하여 관리하기 위해 전역 스코프 역할을 한다.</p>
</li>
<li><p>전역 환경 레코드 구성요소</p>
<ol>
<li><strong>Object Environmnet Record (객체 환경 레코드)</strong> : var 키워드로 선언한 전역 변수와 함수 선언문으로 정의한 전역 함수, 빌트인 전역 프로퍼티, 빌트인 전역 함수, 표준 빌트인 객체를 관리</li>
<li><strong>Declarative Environment Record (선언적 환경 레코드)</strong> : let, const 키워드로 선언한 전역 변수를 관리</li>
</ol>
<p>  👉 전역 환경 레코드의 객체 환경 레코드와 선언적 환경 레코드는 서로 협력하여 전역 스코프와 전역 객체(전역 변수의 전역 객체 프로퍼티화)를  관리한다.</p>
</li>
</ul>
<p>  ✏️ <strong>객체 환경 레코드 생성</strong></p>
<ul>
<li><p>전역 환경 레코드를 구성하는 컴포넌트인 객체 환경 레코드는 <code>BindingObject</code> 라고 부르는 객체와 연결된다.</p>
</li>
<li><p><strong>BindingObject: 전역 객체 생성에서 생성된 전역 객체</strong></p>
</li>
<li><p>전역 코드 평가 과정에서 var 키워드로 선언한 전역 변수와 함수 선언문으로 정의된 전역 함수</p>
<ul>
<li>객체 환경 레코드에 연결된 BindingObject를 통해 전역 객체 프로퍼티와 메서드가 된다.</li>
</ul>
</li>
<li><p>이때 등록된 식별자를 전역 환경 레코드의 객체 환경 레코드에서 검색하면 전역 객체의 프로퍼티를 검색하여 반환</p>
<p>  👉 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수가 전역 객체 프로퍼티와 메서드가 되고 전역 객체를 가리키는 식별자(window) 없이 전역 객체의 프로퍼티를 참조할 수 있는 매커니즘</p>
</li>
<li><p>위 예제의 전역 변수 x와 전역 함수 foo는 객체 환경 레코드를 통해 객체 환경 레코드의 BindingObject에 바인딩 되어있는 전역 객체의 프로퍼티와 메서드가 된다.</p>
</li>
</ul>
<p>  <img src="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F8d77a5f4-2b7a-454d-a6aa-b5bda1943a6e%2Fimage.png" alt="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F8d77a5f4-2b7a-454d-a6aa-b5bda1943a6e%2Fimage.png"></p>
<ul>
<li><p>x 변수는 var 키워드로 선언한 변수</p>
<p>  👉 선언 단계와 초기화 단계가 동시에 진행</p>
</li>
<li><p>전역 코드 평가 시점에 객체 환경 레코드에 바인딩된 BindingObject를 통해 전역 객체에 변수 식별자를 키로 등록한 다음 암묵적으로 undefined를 바인딩</p>
<p>  👉 var 키워드로 선언한 변수는 <strong>코드 실행 단계</strong>에서 변수 선언문 이전에 참조할 수 있다. (코드 평가 단계 x)</p>
</li>
<li><p>단, 변수 선언문 이전에 참조한 변수의 값은 언제나 undefined (var 키워드로 선언한 변수에 할당한 함수 표현식도 이와 동일하게 작용)</p>
<p>  👉 <strong>변수 호이스팅</strong>이 발생하는 원인</p>
</li>
<li><p>함수 선언문으로 정의한 함수가 평가되면 함수 이름과 동일한 이름의 식별자를 객체 환경 레코드에 바인딩된 <strong>BindingObject를 통해 전역 객체에 키로 등록하고 생성된 함수 객체를 즉시 할당</strong>한다.</p>
<p>  👉 함수 호이스팅과 변수 호이스팅의 차이 (함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.)</p>
</li>
</ul>
<p>  ✏️ <strong>선언적 환경 레코드 생성</strong></p>
<ul>
<li><p>let, const 키워드로 선언한 전역 변수(let, const 키워드로 선언한 변수에 할당한 함수 표현식 포함)</p>
</li>
<li><p>위 예제의 변수 y는 const 키워드로 선언한 변수이므로 전역 객체의 프로퍼티가 되지 않고 개념적인 블록 내에 존재</p>
<p>  👉 개념적인 블록이 바로 <strong>전역 환경 레코드의 선언적 환경 레코드</strong></p>
<ul>
<li>전역 변수 y는 let, const 키워드로 선언한 변수이므로 전역 객체의 프로퍼티가 아니다.</li>
<li>window.y와 같이 전역 객체의 프로퍼티로서 참조할 수 없다.</li>
<li>const 키워드로 선언한 변수는 선언 단계와 초기화 단계가 분리되어 진행된다.</li>
<li>따라서 초기화 단계 즉, 런타임에 실행 흐름이 변수 선언문에 도달하기 전까지 <strong>일시적 사각지대</strong>에 빠지게 된다.</li>
</ul>
</li>
<li><p>y 변수에 바인딩 되어있는 uninitialized는 초기화 단계가 진행되지 않아 변수에 접근할 수 없음을 나타내기 위한 표현이며, 실제로 값이 바인딩된 것이 아니다.</p>
</li>
<li><p>let, const 키워드로 선언한 변수도 변수 호이스팅이 발생한 것은 변함이 없다.</p>
</li>
<li><p>단, let, const 키워드로 선언한 변수는 런타임에 컨트롤(제어권)이 변수 선언문에 도달하기 전까지 일시적 사각지대에 빠지기 때문에 참조할 수 없다.</p>
</li>
</ul>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>; <span class="comment">// 전역 변수</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// let, const 키워드로 선언한 변수가 호이스팅되지 않는다면 전역 변수를 참조해야 한다.</span></span><br><span class="line">  <span class="comment">// 하지만 let 키워드로 선언한 변수도 여전히 호이스팅이 발생하기 때문에 참조 에러(ReferenceError)가 발생한다.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// ReferenceError: Cannot access &#x27;foo&#x27; before initilization</span></span><br><span class="line">  <span class="keyword">let</span> foo = <span class="number">2</span>; <span class="comment">// 지역 변수</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>  <strong>2.2. this 바인딩</strong></p>
<ul>
<li>전역 환경 레코드의 <code>[[GlobalThisValue]]</code> 내부 슬롯에 this가 바인딩</li>
<li>전역 코드에서 this는 → 전역 객체를 가리키므로 환경 레코드의 <code>[[GlobalThisValue]]</code> 내부 슬롯에는 전역 객체가 바인딩된다.</li>
<li>전역 코드에서 this를 참조하면? → 전역 환경 레코드의 <code>[[GlobalThisValue]]</code> 내부 슬롯에 바인딩 되어있는 객체가 반환</li>
</ul>
<p>  <img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F9323ab1f-8282-41aa-95c9-3a121d011221%2Fjavascript-context09.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F9323ab1f-8282-41aa-95c9-3a121d011221%2Fjavascript-context09.png"></p>
<ul>
<li>전역 환경 레코드를 구성하는 객체 환경 레코드와 선언전 환경 레코드에는 this 바인딩이 없다.<br>  👉 this 바인딩은 <strong>전역 환경 레코드</strong>와 <strong>함수 환경 레코드</strong>에만 존재</li>
</ul>
<p>  <strong>2.3. 외부 렉시컬 환경에 대한 참조 결정</strong></p>
<ul>
<li>외부 렉시컬 환경에 대한 참조는 현재 평가 중인 소스코드를 포함하는 외부 소스코드의 렉시컬 환경 👉 상위 스코프</li>
<li>현재 평가 중인 소스코드는? → 전역 코드</li>
<li>전역 코드를 포함하는 소스코드는 없으므로 전역 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 null이 할당된다. 👉 전역 렉시컬 환경이 <strong>스코프 체인의 종점</strong>에 존재함을 의미</li>
</ul>
<p>  <img src="https://velog.velcdn.com/images%2Fgavri%2Fpost%2Fdb7710eb-6885-4f19-b25a-d5365494ccba%2Fimage.png" alt="https://velog.velcdn.com/images%2Fgavri%2Fpost%2Fdb7710eb-6885-4f19-b25a-d5365494ccba%2Fimage.png"></p>
<ul>
<li>외부 렉시컬 환경에 대한 참조를 통해 스코프 체인을 구현하는 메커니즘</li>
</ul>
</li>
</ul>
<h3 id="3-전역-코드-실행"><a href="#3-전역-코드-실행" class="headerlink" title="3. 전역 코드 실행"></a>3. 전역 코드 실행</h3><ul>
<li>이제 전역 코드가 순차적으로 <strong>실행</strong></li>
<li>변수 할당문이 실행되어 전역 변수 x, y에 값이 할당 그리고 foo 함수 호출</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F148a74ef-a9fd-411c-b61a-6ca895de14df%2Fjavascript-context11.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F148a74ef-a9fd-411c-b61a-6ca895de14df%2Fjavascript-context11.png"></p>
<ul>
<li>변수 할당문 또는 변수 호출문을 실행하려면? → 변수 또는 함수 이름이 선언된 식별자인지 확인</li>
<li>선언되지 않는 식별자는 참조할 수 없으므로 할당이나 호출이 불가</li>
<li>또한 식별자는 스코프가 다르면 같은 일므을 가질 수 있다. (동일한 이름의 식별자가 다른 스코프에 여러 개 존재할 수 있다.) 👉 어느 스코프의 식별자를 참조하면 되는지 결정할 필요가 있다. 이를 <strong>identifier resolution(식별자 결정)</strong> 이라고 한다.</li>
</ul>
<h3 id="✅-식별자-결정"><a href="#✅-식별자-결정" class="headerlink" title="✅ 식별자 결정"></a>✅ 식별자 결정</h3><p>: 어느 스코프의 식별자를 참조해야하는지 결정하는 것</p>
<ul>
<li>식별자 결정을 위해 식별자를 검색할 때는 <strong>실행 중인 실행 컨텍스트에서 식별자를 검색</strong>하기 시작<ul>
<li>선언된 식별자는 실행 컨텍스트의 렉시컬 환경의 <strong>환경 레코드</strong>에 등록</li>
</ul>
</li>
<li>현재 실행 중인 컨텍스트는? 👉 전역 실행 컨텍스트이므로 전역 렉시컬 환경에서 식별자 x, y, foo를 검색하기 시작</li>
<li>만약 실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면? → 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경 즉, 상위 스코프로 이동하여 식별자를 검색 👉 <strong>스코프 체인의 동작 원리</strong></li>
<li>전역 렉시컬 환경은 스코프 체인의 종점이므로 전역 렉시컬 환경에서 검색할 수 없는 참조 에러를 발생시킴</li>
</ul>
<blockquote>
<p>🔥 이처럼 실행 컨텍스트는 소스코드를 실행하기 위해 필요한 환경을 제공하고 코드의 실행 결과를 실제로 관리하는 영역이다.</p>
</blockquote>
<h3 id="4-foo-함수-코드-평가"><a href="#4-foo-함수-코드-평가" class="headerlink" title="4. foo 함수 코드 평가"></a>4. foo 함수 코드 평가</h3><p>현재 상태는? → 전역 코드 평가를 통해 전역 실행 컨텍스트가 생성되었고 전역 코드를 실행하고 있다.</p>
<p>(현재 상태 foo 함수를 호출하기 직전)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (a) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span> (b) &#123;</span><br><span class="line">    <span class="keyword">const</span> z = <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + x + y + z);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="title function_">bar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">20</span>); <span class="comment">// ← 호출 직전</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>foo 함수가 호출되면 전역 코드의 실행을 일시 중단 → foo 함수 내부로 코드의 제어권이 이동</li>
<li>함수 코드 평가 시작 (실행 순서)<ol>
<li>함수 실행 컨텍스트 생성</li>
<li>함수 렉시컬 환경 생성<ol>
<li>함수 환경 레코드 생성</li>
<li>this 바인딩</li>
<li>외부 렉시컬 환경에 대한 참조 결정</li>
</ol>
</li>
</ol>
</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F9cee357b-0ed8-4375-9842-58b5fc3e3e8e%2Fimage.png" alt="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F9cee357b-0ed8-4375-9842-58b5fc3e3e8e%2Fimage.png"></p>
<p><strong>📚 세부적인 생성 과정 살펴보기</strong></p>
<ol>
<li><strong>함수 실행 컨텍스트 생성</strong><ul>
<li>foo 함수 실행 컨텍스트르 생성 → 함수 렉시컬 환경이 완성된 다음 실행 컨텍스트 스택에 push<ul>
<li>이때 foo 함수 실행 컨텍스트는 실행 컨텍스트 스택의 최상위 &#x3D; 실행중인 실행 컨텍스트</li>
</ul>
</li>
</ul>
</li>
<li><strong>함수 렉시컬 환경 생성</strong></li>
</ol>
<ul>
<li>foo 함수 렉시컬 환경을 생성하고 foo 함수 실행 컨텍스트에 바인딩</li>
</ul>
<p><strong>2.1. 함수 환경 레코드 생성</strong></p>
<p>함수 렉시컬 환경을 구성하는 컴포넌트 중 하나인 함수 환경 레코드가 관리하는 것들</p>
<ul>
<li>매개변수</li>
<li>arguments 객체</li>
<li>함수 내부에서 선언한 지역 변수</li>
<li>함수 내부에서 선언한 중첩 함수</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Ff6edb09d-44c5-4f97-b1c3-472713f17d41%2Fjavascript-context13.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Ff6edb09d-44c5-4f97-b1c3-472713f17d41%2Fjavascript-context13.png"></p>
<p><strong>2.2. this 바인딩</strong></p>
<ul>
<li>함수 환경 레코드의 <code>[[ThisisValue]]</code> 내부 슬롯에 this 바인딩</li>
<li><code>[[ThisisValue]]</code> 내부 슬롯에 바인딩된 객체는 <strong>함수 호출 방식에 따라 결정</strong></li>
<li>foo 함수는 일반 함수로 호출 👉 this는 전역 객체를 가리킨다.</li>
<li></li>
<li>환경 함수 레코드의 <code>[[ThisisValue]]</code> 내부 슬롯에는 전역 객체가 바인딩</li>
<li>foo 함수 내부에서 this를 참조하면? → 함수 환경 레코드의 <code>[[ThisisValue]]</code> 내부 슬롯에 바인딩 되어있는 객체가 반환</li>
</ul>
<p><strong>2.3. 외부 렉시컬 환경에 대한 참조 결정</strong></p>
<ul>
<li>외부 렉시컬 환경에 대한 참조에 <strong>foo 함수 정의가 평가된 시점</strong>에 실행 중인 컨텍스트의 렉시컬 환경에 대한 참조가 할당된다.</li>
<li>foo 함수가 평가된 시점은? → 전역 코드에 정의된 전역 함수<ul>
<li>foo 함수 정의는 전역 코드 평가 시점에 평가된다.</li>
</ul>
</li>
<li>이 시점의 실행 중인 컨텍스트는? → <strong>전역 실행 컨텍스트</strong></li>
<li>따라서 외부 렉시컬 환경에 대한 참조에는 전역 렉시컬 환경의 참조가 할당된다.</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F75bb6fb2-0c48-4c68-8f30-4c575cc1952c%2Fjavascript-context15.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F75bb6fb2-0c48-4c68-8f30-4c575cc1952c%2Fjavascript-context15.png"></p>
<blockquote>
<p>자바스크립트는 함수를 어디서 호출했는지가 아니라 어디에 정의했는지에 따라 상위 스코프를 결정한다. 👉 <code>렉시컬 스코프</code></p>
<p>함수 객체는 자신이 정의된 스코프, 상위 스코프를 기억한다.</p>
</blockquote>
<ul>
<li>자바스크립트 엔진은 함수 정의를 평가하여 함수 객체를 생성할 때 <strong>현재 실행 중인 실행 컨텍스트의 렉시컬 환경</strong> 즉, 함수의 <strong>상위 스코프</strong>를 함수 객체의 내부 슬롯 <code>[[Environment]]</code> 에 저장한다.</li>
<li>함수 렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 할당하는 것 👉 상위 스코프를 가리키는 함수 객체의 내부 슬롯 <code>[[Environment]]</code> 에 저장된 렉시컬 환경의 참조</li>
<li><strong>즉, 함수 객체의 내부 슬롯 <code>[[Environment]]</code> 가 바로 렉시컬 스코프를 구현하는 매커니즘이다.</strong></li>
</ul>
<p>함수 객체의 내부 슬롯 [[Environment]] 와 렉시컬 스코프는 클로저를 이해할 수 있는 중요한 단서다. 👉 <code>클로저</code></p>
<h3 id="5-foo-함수-코드-실행"><a href="#5-foo-함수-코드-실행" class="headerlink" title="5. foo 함수 코드 실행"></a>5. <strong>foo 함수 코드 실행</strong></h3><ul>
<li>이제 런타임이 시작되어 foo 함수의 소스코드가 순차적으로 실행되기 시작한다.</li>
<li>매개변수에 인수가 할당 → 변수 할당문이 실행 → 지역 변수 x, y에 값이 할당 → 함수 bar 호출</li>
<li>이때 식별자 결정을 위해 실행 중인 컨텍스트의 렉시컬 환경에서 식별자를 검색</li>
<li>현재 실행 중인 컨텍스트는? → foo 함수 실행 컨텍스트</li>
<li>foo 함수 렉시컬 환경에서 식별자 x, y를 검색<ul>
<li>실행 중인 실행 컨텍스트의 렉시컬 환경에서 식별자를 검색할 수 없으면? -&gt; 외부 렉시컬 환경에 대한 참조가 가리키는 렉시컬 환경으로 이동하여 식별자 검색</li>
<li>검색 후 검색된 식별자에 값을 바인딩</li>
</ul>
</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Fd4d9f9d5-6788-4fd1-9d84-2e4ea4751169%2Fjavascript-context16.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Fd4d9f9d5-6788-4fd1-9d84-2e4ea4751169%2Fjavascript-context16.png"></p>
<h3 id="6-bar-함수-코드-평가"><a href="#6-bar-함수-코드-평가" class="headerlink" title="6. bar 함수 코드 평가"></a>6. bar 함수 코드 평가</h3><ul>
<li>현재 상태? → foo 함수 코드 평가를 통해 foo 함수 실행 컨텍스트가 생성되었고 foo 함수 코드 실행 중 (bar 함수를 호출하기 직전)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (a) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bar</span> (b) &#123;</span><br><span class="line">    <span class="keyword">const</span> z = <span class="number">5</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + x + y + z);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bar</span>(<span class="number">10</span>); <span class="comment">// ← 호출 직전</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>bar 함수가 호출되면 bar 함수 내부로 코드의 제어권이 이동 → bar 함수 코드를 평가하기 시작</li>
<li>실행 컨텍스트와 렉시컬 환경의 생성 과정은 foo 함수 코드 평가와 동일함<ol>
<li>함수 실행 컨텍스트 생성</li>
<li>함수 렉시컬 환경 생성<ol>
<li>함수 환경 레코드 생성</li>
<li>this 바인딩</li>
<li>외부 렉시컬 환경에 대한 참조 결정</li>
</ol>
</li>
</ol>
</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F12c9ca7e-0d11-45a2-a51f-aa63b5d25089%2Fjavascript-context18.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2F12c9ca7e-0d11-45a2-a51f-aa63b5d25089%2Fjavascript-context18.png"></p>
<h3 id="7-bar-함수-코드-실행"><a href="#7-bar-함수-코드-실행" class="headerlink" title="7. bar 함수 코드 실행"></a>7. bar 함수 코드 실행</h3><ul>
<li>이제 런타임이 시작되어 bar 함수 소스코드가 순차적으로 실행</li>
<li>매개변수에 인수 할당, 변수 할당문 실행 → 지역 변수 z에 값이 할당</li>
<li>console.log(a + b + x + y + z)가 실행</li>
</ul>
<p><strong>📃 <code>console.log(a + b + x + y + z)</code> 실행되는 순서</strong></p>
<ol>
<li><p><strong>console 식별자 검색</strong></p>
<ul>
<li>console 식별자를 스코프 체인에서 검색</li>
<li>식별자를 검색할 때는 언제나 현재 실행 중인 컨텍스트의 렉시컬 환경에서 시작</li>
</ul>
<blockquote>
<p>💡 스코프 체인</p>
<p>: 현재 실행 중인 실행 컨텍스트의 렉시컬 환경에서 시작 👉 외부 렉시컬 환경에 대한 참조로 이어지는 렉시컬 환경의 연속</p>
</blockquote>
<ul>
<li>현재 실행 중인 컨텍스트는? → bar 함수 실행 컨텍스트</li>
<li>bar 함수 실행 컨텍스트의 bar 함수 렉시컬 환경에서 console 식별자를 검색하기 시작</li>
<li>이곳에는 console 식별자가 없으므로 스코프 체인 상의 상위 스코프 즉, 외부 렉시컬 환경에 대한 참조가 가리키는 foo 함수 렉시컬 환경으로 이동하여 검색</li>
<li>foo 함수 실행 컨텍스트의 렉시컬 환경에도 없으므로 스코프 체인 상의 상위 스코프 → 전역 렉시컬 환경으로 이동하여 검색</li>
<li>전역 렉시컬 환경은 객체 환경 레코드, 선언적 환경 레코드로 구성되어 있음</li>
<li>console 식별자는 객체 환경 레코드 BindingObject를 통해 전역 객체에서 찾을 수 있다.</li>
</ul>
</li>
<li><p><strong>log 메서드 검색</strong></p>
<ul>
<li>console 식별자에 바이딩된 객체 즉, console 객체에서 log 메서드를 검색</li>
<li>이때 console 객체의 프로토타입 체인을 통해 메서드를 검색</li>
<li>log 메서드는 console 객체가 직접 소유하는 프로퍼티</li>
</ul>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;log&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>표현식 a + b + x + y + z의 평가</strong></p>
<ul>
<li>console.log 메서드에 전달한 인수 → a + b + x + y + z를 평가하기 위해 a, b, x, y, z 식별자를 검색</li>
<li>식별자는 실행 중인 실행 컨텍스트 렉시컬 환경에서 시작 👉 외부 렉시컬 환경에 대한 참조로 이어지는 <strong>렉시컬 환경의 연속</strong>에서 검색</li>
<li>a 식별자는? → foo 함수의 렉시컬 환경</li>
<li>b 식별자는? → bar 함수의 렉시컬 환경</li>
<li>x, y 식별자는? → foo 함수의 렉시컬 환경</li>
<li>z 식별자는? → bar 함수의 렉시컬 환경</li>
</ul>
</li>
<li><p><strong>console.log 메서드 호출</strong></p>
<ul>
<li>표현식 a + b + x + y + z가 평가되어 생성한 값 42를 console.log 메서드에 전달하여 호출</li>
</ul>
</li>
</ol>
<h3 id="8-bar-함수-코드-실행-종료"><a href="#8-bar-함수-코드-실행-종료" class="headerlink" title="8. bar 함수 코드 실행 종료"></a>8. bar 함수 코드 실행 종료</h3><ul>
<li>console.log 메서드가 호출되고 종료하면 더는 실행할 코드가 없으므로 bar 코드의 실행이 종료</li>
<li>이때 실행 컨텍스트 스택에서 bar 함수 실행 컨텍스트가 pop<ul>
<li>foo 실행 컨텍스트가 실행 중인 실행 컨텍스트가 된다.</li>
</ul>
</li>
<li><strong>bar 함수 실행 컨텍스트가 제거되었다고 해서 bar 함수 렉시컬 환경까지 즉시 소멸되는 것은 아니다.</strong></li>
<li>렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 <strong>독립적인 객체</strong>다.</li>
<li>객체를 포함한 모든 값은 참조되지 않을 때 가비지 컬렉터에 의해 메모리 공간의 확보가 해재되어 소멸한다.</li>
</ul>
<h3 id="9-foo-함수-코드-실행-종료"><a href="#9-foo-함수-코드-실행-종료" class="headerlink" title="9. foo 함수 코드 실행 종료"></a>9. foo 함수 코드 실행 종료</h3><ul>
<li>bar 함수가 호출되고 종료하면 더는 실행할 코드가 없으므로 foo 코드의 실행이 종료됨</li>
<li>이때 실행 컨텍스트 스택에서 foo 함수 실행 컨텍스트 pop<ul>
<li>전역 실행 컨텍스트가 실행 중인 컨텍스트</li>
</ul>
</li>
</ul>
<h3 id="10-전역-코드-실행-종료"><a href="#10-전역-코드-실행-종료" class="headerlink" title="10. 전역 코드 실행 종료"></a>10. 전역 코드 실행 종료</h3><ul>
<li>foo 함수가 종료되면 더는 실행할 전역 코드가 없으므로 코드 실행이 종료되고 전역 실행 컨텍스트도 실행 컨텍스트에서 제거되어 컨텍스트 스택에는 아무것도 남아있지 않게 된다.</li>
</ul>
<h2 id="실행-컨텍스트-생성과-식별자-검색-과정"><a href="#실행-컨텍스트-생성과-식별자-검색-과정" class="headerlink" title="실행 컨텍스트 생성과 식별자 검색 과정"></a>실행 컨텍스트 생성과 식별자 검색 과정</h2><p>let, const 키워드와 블록 레벨 스코프에서 살펴보았듯이 var 키워드로 선언한 변수는 오로지 함수의 코드 블록만 지역 스코프로 인정하는 함수 레벨 스코프를 따른다.</p>
<p>하지만 let, const 키워드로 선언한 변수는 모든 코드 블록을 지역 스코프로 인정하는 블록 레벨 스코프를 따른다.</p>
<p>🙌🏻 다음 예제를 살펴보자</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>if문의 코드 블록 내에서 let 키워드로 변수가 선언<ul>
<li>if문의 코드 블록이 실행되면 if문의 코드 블록을 위한 블록 레벨 스코프를 생성해야 한다.</li>
<li>이를 위해 선언적 환경 레코드를 갖는 렉시컬 환경을 새롭게 생성하여 기존의 렉시컬 환경을 교체한다.</li>
</ul>
</li>
<li>새롭게 생성된 if문의 코드 블록을 위한 렉시컬 환경의 외부 렉시컬 환경에 대한 참조 👉 if문이 실행되기 이전의 전역 렉시컬 환경</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fgavri%2Fpost%2F43e900bb-968f-40a8-bf5c-7f721ce5ca8d%2Fimage.png" alt="Global Execution Context의 화살표가 가리키는 방향을 살펴보자."></p>
<p>Global Execution Context의 화살표가 가리키는 방향을 살펴보자.</p>
<p>📃 <strong>if문 뿐만 아니라 블록 레벨 스코프를 생성하는 모든 블록문에 적용</strong></p>
<ul>
<li>for문의 변수 선언문에 let 키워드를 사용한 for문은 코드 블록이 반복해서 실행될 때마다 코드 블록을 위한 새로운 렉시컬 환경 생성</li>
<li>만약 for문의 코드 블록 내에서 정의된 함수가 있다면? 👉 함수의 상위 스코프는 for문의 코드블록이 생성한 렉시컬 환경</li>
<li>이때 함수의 상위 스코프는 for문의 코드 블록이 반복해서 실행될 때마다 식별자의 값을 유지해야 함<ul>
<li>식별자(for문의 변수 선언문 및 for문의 코드 블록 내에서 선언된 지역 변수 등)</li>
</ul>
</li>
</ul>
<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>내가 쓴 코드가 자바스크립트에서 어떻게 동작하는지에 대해서 알 수 있는 기회가 되었다.<br>결과값을 확인하기 위해 주구장창 써왔던 console.log도 어떤 방식으로 값을 출력하는지에 대해서 알게되니 공부를 하면서 하나의 지식을 쌓은 것 같아 기분이 좋다!</p>
<p>실행 컨텍스트를 공부하니 스코프에 대해서도 잘 알아놓으면 좋겠다라는 생각이 든다.다음 자바스크립트 Deep Dive 정리는 스코프 너로 정했다. (๑╹o╹)φ</p>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DeepDive</tag>
      </tags>
  </entry>
  <entry>
    <title>크레인 인형뽑기 [2019 카카오 개발자 겨울 인턴십]</title>
    <url>/2022/221013-archive/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.<br>죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/69f1cd36-09f4-4435-8363-b71a650f7448/crane_game_101.png" alt="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/69f1cd36-09f4-4435-8363-b71a650f7448/crane_game_101.png"></p>
<p>게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 5 x 5 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.</p>
<p>모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.</p>
<p>다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/638e2162-b1e4-4bbb-b0d7-62d31e97d75c/crane_game_102.png" alt="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/638e2162-b1e4-4bbb-b0d7-62d31e97d75c/crane_game_102.png"></p>
<p>만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8569d736-091e-4771-b2d3-7a6e95a20c22/crane_game_103.gif" alt="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8569d736-091e-4771-b2d3-7a6e95a20c22/crane_game_103.gif"></p>
<p>크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동 시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)</p>
<p>게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.</p>
<h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>board 배열은 2차원 배열로 크기는 5 x 5 이상 30 x 30 이하입니다.</p>
<p>board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.</p>
<p>0은 빈 칸을 나타냅니다.</p>
<p>1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나<br>타냅니다.</p>
<p>moves 배열의 크기는 1 이상 1,000 이하입니다.</p>
<p>moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.</p>
<h2 id="예제입력"><a href="#예제입력" class="headerlink" title="예제입력"></a>예제입력</h2><p>▣ 입력예제 1</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]] <span class="comment">//board 배열</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="comment">//moves 배열</span></span><br></pre></td></tr></table></figure>

<p>▣ 출력예제 1</p>
<p>4</p>
<hr>
<h3 id="🙌🏻-문제-이해하기"><a href="#🙌🏻-문제-이해하기" class="headerlink" title="🙌🏻 문제 이해하기"></a>🙌🏻 문제 이해하기</h3><p>문제를 해결하기 위해 어떤 방법을 사용해야하는지 생각해보자 :)</p>
<ol>
<li>인형을 스택이라는 바구니에 넣어야 한다. ➡️ 배열 생성</li>
<li>moves 배열을 하나씩 순회해야한다. ➡️ forEach 메서드</li>
<li>위치 1에 해당하는 board의 인덱스는 0이다.<ol>
<li>board 배열의 형태는 2차원 배열이며 위치 1에 해당하는 요소를 탐색하기 위해선</li>
<li>[0][1], [1][1], [2][1] 의 형태로 반복을 해야한다. ➡️ for문 [i][1]</li>
</ol>
</li>
<li>반복문으로 탐색을 하다가 값이 0이 아닌 요소를 만나면 인형을 꺼내야한다.</li>
<li>인형을 꺼냈다면 해당 위치의 배열 요소는 0으로 만들어줘야 한다.</li>
<li>꺼낸 인형을 스택에 push하자. 그 전에 체크를 해야하는데,<ol>
<li>만약 스택에 담겨있는 마지막 인형이 넣을 인형과 동일하다면? → push가 아니라 pop을 하면 된다. 그리고 answer +&#x3D; 2</li>
<li>동일하지 않다면? → 그 때 push하기</li>
</ol>
</li>
<li>터진 인형의 갯수를 구하는 문제이기 때문에 answer를 반환하면 된다.</li>
</ol>
<h3 id="✅-solution"><a href="#✅-solution" class="headerlink" title="✅ solution"></a>✅ solution</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">board, moves</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  moves.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 순회하는 요소가 0이 아닐때만 stack에 값을 push할 수 있다.</span></span><br><span class="line">      <span class="keyword">if</span> (board[i][item - <span class="number">1</span>] !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// stack에 넣을 값을 임시 저장해놓기 (인형 꺼내기)</span></span><br><span class="line">        <span class="keyword">let</span> tmp = board[i][item - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 값을 선택했으니, 배열의 원소는 0으로 설정해놓기</span></span><br><span class="line">        board[i][item - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// stack에 push 하기 전에 먼저 체크</span></span><br><span class="line">        <span class="comment">// 1. 만약 tmp가 stack의 가장 마지막 요소와 같으면 pop하고 answer += 2</span></span><br><span class="line">        <span class="comment">// 2. tmp가 stack의 가장 마지막 요소와 일치하지 않으면 stack.push(tmp)</span></span><br><span class="line">        <span class="keyword">if</span> (tmp === stack[stack.<span class="property">length</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">          stack.<span class="title function_">pop</span>();</span><br><span class="line">          answer += <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> stack.<span class="title function_">push</span>(tmp);</span><br><span class="line">        <span class="comment">// 해당 포지션에선 작업을 끝냈기 때문에 for문에서 탈출</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title function_">solution</span>(</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">      [<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">      [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>stack을 구현하고 배열을 하는 부분까지는 이제 어렵지 않다. 하지만 어느 시점에서 어떻게 자료를 빼낼건지에 대해서는 계속 공부를 하면서 익숙해져야할 것 같다…😢</p>
<p>예전엔 건들지도 못했던 내 자신과 비교하면 그래도 많이 늘었다! 게속 열심히 공부해보즈앗</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, World!</title>
    <url>/2022/hello-world-0/</url>
    <content><![CDATA[<h2 id="🙌-안녕-GitHub-블로그"><a href="#🙌-안녕-GitHub-블로그" class="headerlink" title="🙌 안녕, GitHub 블로그!"></a>🙌 안녕, GitHub 블로그!</h2><p>여태 Notion으로 공부한 내용을 정리하다가 github 블로그로 넘어오게되었다.<br>그 이유는.. 모두에게 공개되는 github에 글을 작성했을 때, 더 신중하게 작성할 수 &gt;있을 것이라는 생각에 바로 github으로 변경했다.</p>
<h3 id="📒-영어공부의-필요성을-느끼는-중입니다"><a href="#📒-영어공부의-필요성을-느끼는-중입니다" class="headerlink" title="📒 영어공부의 필요성을 느끼는 중입니다."></a>📒 영어공부의 필요성을 느끼는 중입니다.</h3><p>최근 공부를 하면서 모르는 개념이 생길 때마다 공식 문서를 찾아보는데 문서를 볼 때마다 제대로 된 이해를 하지 못하는 것 같은 느낌이 들었다. 개발 관련된 단어라도 알고 있으면 이해가 수월하지 않을까? 라는 생각이 드는 찰나에 meot님의 개발 용어 레포지토리를 찾았다! 이것부터 차근차근 열심히 영어공부를 해보자..!</p>
<h3 id="✨-공부한-내용-기록하기"><a href="#✨-공부한-내용-기록하기" class="headerlink" title="✨ 공부한 내용 기록하기"></a>✨ 공부한 내용 기록하기</h3><p>TIL 이외의 내용들은 모두 이 곳에 기록해두자.<br>아직 미완성된 블로그이지만 글도 많이 쌓이고 기능도 조금씩 고쳐나가면 좋은 블로그가 되지 않을까:)<br>~<br>~-</p>
]]></content>
      <tags>
        <tag>IT</tag>
        <tag>Web</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
</search>
