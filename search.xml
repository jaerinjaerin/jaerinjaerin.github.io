<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1부터 N까지의 원소를 갖는 집합의 부분집합 구하기</title>
    <url>/2022/221007-archive/</url>
    <content><![CDATA[<h2 id="✏️-문제"><a href="#✏️-문제" class="headerlink" title="✏️  문제"></a>✏️  문제</h2><p>자연수 N이 주어지면 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력하는 프로그램을 작성하세요.</p>
<p>입력설명<br>첫 번째 줄에 자연수 N(1 ≤ N ≤ 10)이 주어집니다. </p>
<p>출력 설명<br>첫 번째 줄부터 각 줄에 하나씩 부분집합을 출력예제와 같은 순서로 출력한다.</p>
<p>입력 예제</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>출력 예제</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>


<h3 id="👉-부분-집합을-구하는-문제"><a href="#👉-부분-집합을-구하는-문제" class="headerlink" title="👉 부분 집합을 구하는 문제"></a>👉 부분 집합을 구하는 문제</h3><p>1을 방문을 할 지 안 할지 2가지 선택, 2를 방문을 할 지 안 할지 2가지 선택, 3을 방문을 할 지 안 할지 2가지 선택<br>➡️  총 8가지의 트리가 만들어진다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">상태트리</span><br><span class="line"></span><br><span class="line">부분집합의 개수 <span class="number">2</span> ^ x - <span class="number">1</span> (공집합 제외)</span><br><span class="line">집합에 원소가 들어갈지 안들어갈지 선택한다.</span><br><span class="line"></span><br><span class="line"><span class="title function_">D</span>(<span class="number">1</span>) -&gt; O -&gt; <span class="title function_">D</span>(<span class="number">2</span>) -&gt; o -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">                  -&gt; x -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">     -&gt; X -&gt; <span class="title function_">D</span>(<span class="number">2</span>) -&gt; o -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">                  -&gt; x -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br></pre></td></tr></table></figure>

<p>문제에서 1부터 N까지의 원소를 갖는 부분집합을 구하라고 했기 때문에, 1부터 N까지의 길이에 0을 담은 체크 배열을 만들어준다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> checkArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>이제 Head 노드에서부터 노드를 방문하면서, 해당 노드를 포함할 것인지 확인하고, 부분 집합을 찾아준다.</p>
<p>(내가 만든 부분 집합에 참여시키고 참여시키지않는 것을 확인 후 배열에 하나씩 담아주면 된다.)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === n + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 1로 들어온 것들만 출력하기</span></span><br><span class="line">        <span class="keyword">if</span> (checkArray[i] === <span class="number">1</span>) temp += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">length</span> &gt;= <span class="number">1</span>) answer.<span class="title function_">push</span>(temp.<span class="title function_">trim</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 집합에 포함시킨다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 집합에 포함시키지 않는다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">0</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<h3 id="👉-DFS-함수를-잘-살펴보자"><a href="#👉-DFS-함수를-잘-살펴보자" class="headerlink" title="👉  DFS 함수를 잘 살펴보자"></a>👉  DFS 함수를 잘 살펴보자</h3><ol>
<li>부분집합이 주어진 배열의 길이를 넘어갈 수는 없으므로, depth가 배열의 길이와 같다면 재귀를 멈추고, 1로 들어온 인덱스만 출력한다.</li>
<li>depth가 아직 배열의 길이에 도달하지 않으면, 자기 자식 노드를 선택하는 경우와 그렇지 않은 경우를 만들고, 자식을 호출하여 부분집합을 찾아간다.</li>
</ol>
<h3 id="✅-전체-코드"><a href="#✅-전체-코드" class="headerlink" title="✅ 전체 코드"></a>✅ 전체 코드</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [];</span><br><span class="line">  <span class="keyword">let</span> checkArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === n + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 1로 들어온 것들만 출력하기</span></span><br><span class="line">        <span class="keyword">if</span> (checkArray[i] === <span class="number">1</span>) temp += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">length</span> &gt;= <span class="number">1</span>) answer.<span class="title function_">push</span>(temp.<span class="title function_">trim</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 집합에 포함시킨다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 집합에 포함시키지 않는다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">0</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">DFS</span>(<span class="number">1</span>); <span class="comment">// DFS는 1부터 시작한다.</span></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>DFS를 사용하려면 재귀함수가 기본적인 지식으로 깔려 있어야하는 것 같다. 재귀함수를 배웠다고 생각했는데 막상 그것도 아닌가보다. 😟 DFS가 실행되는 과정에 대해서 더 이해하는 과정이 필요할 것 같다. 부분집합을 구하라는 문제를 봤을 때, 어떻게 구해야하지 라고 생각하다가 가지치기 형식으로 그림을 그리다보니 이진트리 형태로 나오는 것을 보면서 이러면 이진트리로 접근해야겠다. 라는 생각이 들었던 것만으로도 오늘은 성공인것 같다!</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>실행 컨텍스트 - 실행 컨텍스트가 하는 역할이 무엇일까?</title>
    <url>/2022/221012-archive/</url>
    <content><![CDATA[<p>자바스크립트 Deep Dive를 공부하고 정리해보자 :)<br>실행 컨텍스트가 무슨 역할을 하는지에 대해서 알아보자.</p>
<h2 id="소스코드의-타입"><a href="#소스코드의-타입" class="headerlink" title="소스코드의 타입"></a>소스코드의 타입</h2><p>ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다.</p>
<p>4가지 타입의 소스코드는 실행 컨텍스트를 생성한다.</p>
<table>
<thead>
<tr>
<th>소스코드의 타입</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>전역 코드</td>
<td>전역에 존재하는 소스코드를 말한다.</td>
</tr>
<tr>
<td>전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>
<td></td>
</tr>
<tr>
<td>함수 코드</td>
<td>함수 내부에 존재하는 소스코드를 말한다.</td>
</tr>
<tr>
<td>함수 내부에 중첩된 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>
<td></td>
</tr>
<tr>
<td>eval 코드</td>
<td>빌트인 전역 함수인 [[eval 함수]]에 인수로 전달되어 실행되는 소스코드를 말한다.</td>
</tr>
<tr>
<td>모듈 코드</td>
<td>모듈 내부에 존재하는 소스코드를 말한다.</td>
</tr>
<tr>
<td>모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다.</td>
<td></td>
</tr>
</tbody></table>
<h3 id="소스코드를-4가지-타입으로-구분하는-이유"><a href="#소스코드를-4가지-타입으로-구분하는-이유" class="headerlink" title="소스코드를 4가지 타입으로 구분하는 이유"></a><strong>소스코드를 4가지 타입으로 구분하는 이유</strong></h3><p>소스코드의 타입에 따라 실행 컨텍스트를 실행하는 과정과 관리 내용이 다르기 때문이다.</p>
<h3 id="전역-코드"><a href="#전역-코드" class="headerlink" title="전역 코드"></a><strong>전역 코드</strong></h3><ul>
<li>전역 코드는 전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성해야 한다.</li>
<li>그리고 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의 프로퍼티와 메서드로 바인딩하고 참조하기 위해 전역 객체와 연결되어야 한다. 👉 이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 생성된다.</li>
</ul>
<h3 id="함수-코드"><a href="#함수-코드" class="headerlink" title="함수 코드"></a><strong>함수 코드</strong></h3><ul>
<li>함수 코드는 지역 스코프를 생성</li>
<li>지역 변수, 매개변수, arguments 객체를 관리해야 한다.</li>
<li>그리고 생성한 지역 스코프를 전역 스코프에서 시작하는 스코프 체이의 일원으로 연결해야 한다.</li>
</ul>
<p>👉 이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 생성된다.</p>
<h3 id="eval-코드"><a href="#eval-코드" class="headerlink" title="eval 코드"></a>eval 코드</h3><ul>
<li>strict mode에서 자신만의 독자적인 스코프를 생성한다.</li>
</ul>
<p>👉 이를 위해 eval 코드가 평가되면 eval 실행 컨텍스트가 생성된다.</p>
<h3 id="모듈-코드"><a href="#모듈-코드" class="headerlink" title="모듈 코드"></a>모듈 코드</h3><ul>
<li>모듈 코드는 모듈별로 독자적인 모듈 스코프를 생성한다.</li>
</ul>
<p>👉 이를 위해 모듈 코드가 평가되면 함수 실행 컨텍스트가 생성된다.</p>
<h2 id="소스코드의-평가와-실행"><a href="#소스코드의-평가와-실행" class="headerlink" title="소스코드의 평가와 실행"></a>소스코드의 평가와 실행</h2><p>모든 소스코드는 실행에 앞서 <strong>평가 과정</strong>을 거치며 코드를 실행하기 위한 준비를 한다.</p>
<p>👉 <em>즉, 자바스크립트 엔진은 2개의 과정으로 나누어 처리한다.</em></p>
<h3 id="소스코드의-평가-과정"><a href="#소스코드의-평가-과정" class="headerlink" title="소스코드의 평가 과정"></a>소스코드의 평가 과정</h3><ul>
<li><p><strong>실행 컨텍스트</strong>를 생성</p>
</li>
<li><p>변수, 함수 등의 선언문만 먼저 실행</p>
<p>  👉 생성된 변수나 함수 식별자를 키로 실행 컨텍스트가 관리하는 스코프에 등록한다.</p>
</li>
</ul>
<p><img src="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Ffbef7e69-646e-444f-86c6-86c6fe64c8df%2Fjavascript-context01.png" alt="https://velog.velcdn.com/images%2Fhangem422%2Fpost%2Ffbef7e69-646e-444f-86c6-86c6fe64c8df%2Fjavascript-context01.png"></p>
<h3 id="소스코드-평가-과정이-끝나면-소스코드가-순차적으로-실행되기-시작한다"><a href="#소스코드-평가-과정이-끝나면-소스코드가-순차적으로-실행되기-시작한다" class="headerlink" title="소스코드 평가 과정이 끝나면 소스코드가 순차적으로 실행되기 시작한다."></a>소스코드 평가 과정이 끝나면 소스코드가 순차적으로 실행되기 시작한다.</h3><p>👉 즉, 런타임이 시작된다.</p>
<ul>
<li>소스코드 실행에 필요한 정보<ul>
<li>변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 취득한다.</li>
</ul>
</li>
<li>변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다.</li>
</ul>
<p>예를 들어, 다음과 같은 소스코드가 실행된다고 생각해보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>🙌🏻 <strong>자바스크립트 엔진은 위 예제를 2개의 과정으로 나누어 처리한다.</strong></p>
<ol>
<li>소스코드 평가 과정에서 변수 선언문 <strong>var x</strong>를 먼저 실행한다.<ol>
<li>이때 생성된 변수 식별자 x는 실행 컨텍스트가 관리하는 <strong>스코프에 등록</strong></li>
<li>undefined로 초기화</li>
</ol>
</li>
<li>소스코드 평가 과정이 끝나면 소스코드 실행 과정이 시작된다.<ol>
<li>변수 할당문 x &#x3D; 1 만 실행한다.</li>
<li>이때 x 변수에 값을 할당하려면 먼저 x 변수가 선언된 변수인지 확인해야 한다.</li>
<li>이를 위해 실행 컨텍스트가 관리하는 스코프에 x 변수가 등록되어 있는지 확인한다.</li>
</ol>
</li>
</ol>
<h2 id="실행-컨텍스트의-역할"><a href="#실행-컨텍스트의-역할" class="headerlink" title="실행 컨텍스트의 역할"></a>실행 컨텍스트의 역할</h2><p>🙌🏻 전역 코드와 함수 코드로 구성되어 있는 예제를 살펴보면서 자바스크립트 엔진이 이 예제를 어떻게 평가하고 실행할지 생각해보자.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 전역 변수 선언</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 정의</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="comment">// 지역 변수 선언</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 메서드 호출</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a + x + y); <span class="comment">// 130</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 호출</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 메서드 호출</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x + y); <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-전역-코드-평가"><a href="#1-전역-코드-평가" class="headerlink" title="1. 전역 코드 평가"></a>1. 전역 코드 평가</h3><ul>
<li><p>전역 코드를 실행하기 앞서 평가 과정을 거치며 “전역 코드를 실행할 준비”를 한다.</p>
</li>
<li><p>소스코드 평가 과정에서는 선언문만 먼저 실행한다.</p>
</li>
<li><p>따라서 전역 코드의 변수 선언문과 함수 선언문이 먼저 실행</p>
<p>  👉 <strong>생성된 전역 변수와 전역 함수가 실행 컨텍스트가 관리하는 전역 스코프</strong>에 등록된다.</p>
</li>
<li><p>이때 var 키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수</p>
<p>  👉 전역 객체의 프로퍼티와 메서드가 된다.</p>
</li>
</ul>
<h3 id="2-전역-코드-실행"><a href="#2-전역-코드-실행" class="headerlink" title="2. 전역 코드 실행"></a>2. 전역 코드 실행</h3><ul>
<li>평가 과정이 끝나면 런타임이 시작되어 전역 코드가 순차적으로 실행된다.</li>
<li>이때 전역 변수에 값이 할당되고 함수가 호출된다.</li>
<li>함수가 호출되면 전역 코드의 실행을 일시 중단하고 함수 내부로 진입한다.</li>
</ul>
<h3 id="3-함수-코드-평가"><a href="#3-함수-코드-평가" class="headerlink" title="3. 함수 코드 평가"></a>3. 함수 코드 평가</h3><ul>
<li><p>함수 내부로 진입하면 함수 내부의 문들을 실행하기 앞서 함수 코드 평가 과정을 거친다.</p>
<p>  👉 함수 코드를 실행하기 위한 준비</p>
</li>
<li><p>이때 매개변수와 지역 변수 선언문이 먼저 실행</p>
<p>  👉 <strong>생성된 매개변수와 지역 변수가 실행 컨텍스트가 관리하는 지역 스코프</strong>에 등록된다.</p>
</li>
<li><p>또한 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체가 생성</p>
<p>  👉 지역 스코프에 등록되고 this 바인딩도 결정된다.</p>
</li>
</ul>
<h3 id="4-함수-코드-실행"><a href="#4-함수-코드-실행" class="headerlink" title="4. 함수 코드 실행"></a>4. 함수 코드 실행</h3><ul>
<li><p>함수 코드 평가 과정이 끝나면 런타임이 시작되어 순차적으로 실행되기 시작</p>
</li>
<li><p>이때 매개변수와 지역 변수에 값이 할당되고, console.log 메서드가 호출된다.</p>
</li>
<li><p>console.log 메서드를 호출하기 위해서</p>
<ol>
<li><p>식별자인 console을 스코프 체인을 통해 검색<br>  : 이를 위해 함수 코드의 지역 스코프는 상위 스코프인 전역 스코프와 연결되어야 하지만 console 식별자는 스코프 체인에 등록되어 있지 않고 <strong>전역 객체 프로퍼티</strong>로 존재한다.<br>  👉 전역 객체 프로퍼티가 마치 전역 변수처럼 전역 스코프를 통해 검색 가능하다는 것을 의미한다.</p>
</li>
<li><p>log 프로퍼티를 console 객체의 프로토타입 체인을 통해 검색</p>
<p> : 그 후 console.log 메서드에 인수로 전달된 표현식 a + x + y가 평가된다.</p>
</li>
</ol>
</li>
<li><p>console.log 메서드 실행이 종료되면 함수 코드 실행 과정이 종료</p>
</li>
<li><p>함수 호출 이전으로 되돌아가 전역 코드 실행을 계속한다.</p>
</li>
</ul>
<p>코드가 실행되려면 스코프를 구분하여 식별자와 바인딩된 값이 관리되어야 한다. 그리고 <strong>중첩 관계에 의해 스코프 체인을 형성</strong>하여 식별자를 검색할 수 있어야 하고, 전역 객체의 프로퍼티도 전역 변수처럼 검색할 수 있어야 한다.</p>
<p>또한 함수 호출이 종료되면 함수 호출 이전으로 되돌아가기 위해 현재 실행 중인 코드와 이전에 실행하던 코드를 구분하여 관리해야 한다.</p>
<h3 id="✏️-코드가-실행되려면-다음과-같이-스코프-식별자-코드-실행-순서-등의-관리가-필요하다"><a href="#✏️-코드가-실행되려면-다음과-같이-스코프-식별자-코드-실행-순서-등의-관리가-필요하다" class="headerlink" title="✏️ 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다."></a>✏️ 코드가 실행되려면 다음과 같이 스코프, 식별자, 코드 실행 순서 등의 관리가 필요하다.</h3><ol>
<li>선언에 의해 생성된 모든 식별자를 스코프를 구분하여 등록하고, 상태 변화를 지속적으로 관리할 수 있어야 한다.</li>
<li>스코프는 중첩 관계에 의해 스코프 체인을 형성해야 한다.<ol>
<li>즉, <strong>스코프 체인</strong>을 통해 상위 스코프로 이동하여 식별자를 검색할 수 있어야 한다.</li>
</ol>
</li>
<li>현재 실행 중인 코드의 실행 순서를 변경할 수 있어야 하며 다시 되돌아갈 수도 있어야 한다.</li>
</ol>
<p>이 모든 것을 관리하는 것이 실행 컨텍스트다.</p>
<h3 id="✅-실행-컨텍스트"><a href="#✅-실행-컨텍스트" class="headerlink" title="✅ 실행 컨텍스트"></a>✅ 실행 컨텍스트</h3><p>: 소스코드를 <strong>실행하는 데 필요한 환경을 제공</strong>하고 코드의 실행 결과를 <strong>실제로 관리</strong>하는 영역</p>
<p>식별자(변수, 함수, 클래스 등의 이름)을 등록하고 관리하는 <strong>스코프와 코드 실행 순서 관리를 구현한 내부 매커니즘</strong></p>
<p><strong>💡 모든 코드는 실행 컨텍스트를 통해 실행되고 관리된다.</strong></p>
<ul>
<li>식별자와 스코프: 실행 컨텍스트의 <strong>렉시컬 환경</strong>으로 관리</li>
<li>코드 실행 순서: <strong>실행 컨텍스트 스택</strong>으로 관리</li>
</ul>
<hr>
<h2 id="😎-정리하면서-배운-점"><a href="#😎-정리하면서-배운-점" class="headerlink" title="😎 정리하면서 배운 점"></a>😎 정리하면서 배운 점</h2><p>실행 컨텍스트는 소스코드를 실행하고 관리하는 영역이라는 것에 대해서 알게되었다.<br>모든 코드는 실행 컨텍스트에 의해 실행되고 관리된다는 점을 잊지말자.</p>
<p>렉시컬 환경이 무엇이고, 실행 컨텍스트가 무엇인지 매번 들을 때마다 나중에 공부해야지 생각했는데 드디어 공부해야할 때가 온 것 같다.</p>
<p>렉시컬 스코프, 렉시컬 환경, 실행 컨텍스트 스택에 대해서는 다음 블로그에서 알아보자 :)</p>
]]></content>
      <categories>
        <category>gallery</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DeepDive</tag>
      </tags>
  </entry>
  <entry>
    <title>크레인 인형뽑기 [2019 카카오 개발자 겨울 인턴십]</title>
    <url>/2022/221013-archive/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.<br>죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/69f1cd36-09f4-4435-8363-b71a650f7448/crane_game_101.png" alt="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/69f1cd36-09f4-4435-8363-b71a650f7448/crane_game_101.png"></p>
<p>게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 5 x 5 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.</p>
<p>모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.</p>
<p>다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/638e2162-b1e4-4bbb-b0d7-62d31e97d75c/crane_game_102.png" alt="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/638e2162-b1e4-4bbb-b0d7-62d31e97d75c/crane_game_102.png"></p>
<p>만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.</p>
<p><img src="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8569d736-091e-4771-b2d3-7a6e95a20c22/crane_game_103.gif" alt="https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/8569d736-091e-4771-b2d3-7a6e95a20c22/crane_game_103.gif"></p>
<p>크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동 시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)</p>
<p>게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.</p>
<h2 id="제한-사항"><a href="#제한-사항" class="headerlink" title="제한 사항"></a>제한 사항</h2><p>board 배열은 2차원 배열로 크기는 5 x 5 이상 30 x 30 이하입니다.</p>
<p>board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.</p>
<p>0은 빈 칸을 나타냅니다.</p>
<p>1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나<br>타냅니다.</p>
<p>moves 배열의 크기는 1 이상 1,000 이하입니다.</p>
<p>moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.</p>
<h2 id="예제입력"><a href="#예제입력" class="headerlink" title="예제입력"></a>예제입력</h2><p>▣ 입력예제 1</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>]] <span class="comment">//board 배열</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>] <span class="comment">//moves 배열</span></span><br></pre></td></tr></table></figure>

<p>▣ 출력예제 1</p>
<p>4</p>
<hr>
<h3 id="🙌🏻-문제-이해하기"><a href="#🙌🏻-문제-이해하기" class="headerlink" title="🙌🏻 문제 이해하기"></a>🙌🏻 문제 이해하기</h3><p>문제를 해결하기 위해 어떤 방법을 사용해야하는지 생각해보자 :)</p>
<ol>
<li>인형을 스택이라는 바구니에 넣어야 한다. ➡️ 배열 생성</li>
<li>moves 배열을 하나씩 순회해야한다. ➡️ forEach 메서드</li>
<li>위치 1에 해당하는 board의 인덱스는 0이다.<ol>
<li>board 배열의 형태는 2차원 배열이며 위치 1에 해당하는 요소를 탐색하기 위해선</li>
<li>[0][1], [1][1], [2][1] 의 형태로 반복을 해야한다. ➡️ for문 [i][1]</li>
</ol>
</li>
<li>반복문으로 탐색을 하다가 값이 0이 아닌 요소를 만나면 인형을 꺼내야한다.</li>
<li>인형을 꺼냈다면 해당 위치의 배열 요소는 0으로 만들어줘야 한다.</li>
<li>꺼낸 인형을 스택에 push하자. 그 전에 체크를 해야하는데,<ol>
<li>만약 스택에 담겨있는 마지막 인형이 넣을 인형과 동일하다면? → push가 아니라 pop을 하면 된다. 그리고 answer +&#x3D; 2</li>
<li>동일하지 않다면? → 그 때 push하기</li>
</ol>
</li>
<li>터진 인형의 갯수를 구하는 문제이기 때문에 answer를 반환하면 된다.</li>
</ol>
<h3 id="✅-solution"><a href="#✅-solution" class="headerlink" title="✅ solution"></a>✅ solution</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">board, moves</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  moves.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; board.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 순회하는 요소가 0이 아닐때만 stack에 값을 push할 수 있다.</span></span><br><span class="line">      <span class="keyword">if</span> (board[i][item - <span class="number">1</span>] !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// stack에 넣을 값을 임시 저장해놓기 (인형 꺼내기)</span></span><br><span class="line">        <span class="keyword">let</span> tmp = board[i][item - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 값을 선택했으니, 배열의 원소는 0으로 설정해놓기</span></span><br><span class="line">        board[i][item - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// stack에 push 하기 전에 먼저 체크</span></span><br><span class="line">        <span class="comment">// 1. 만약 tmp가 stack의 가장 마지막 요소와 같으면 pop하고 answer += 2</span></span><br><span class="line">        <span class="comment">// 2. tmp가 stack의 가장 마지막 요소와 일치하지 않으면 stack.push(tmp)</span></span><br><span class="line">        <span class="keyword">if</span> (tmp === stack[stack.<span class="property">length</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">          stack.<span class="title function_">pop</span>();</span><br><span class="line">          answer += <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> stack.<span class="title function_">push</span>(tmp);</span><br><span class="line">        <span class="comment">// 해당 포지션에선 작업을 끝냈기 때문에 for문에서 탈출</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title function_">solution</span>(</span><br><span class="line">    [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">      [<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">      [<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">      [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">    ],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>stack을 구현하고 배열을 하는 부분까지는 이제 어렵지 않다. 하지만 어느 시점에서 어떻게 자료를 빼낼건지에 대해서는 계속 공부를 하면서 익숙해져야할 것 같다…😢</p>
<p>예전엔 건들지도 못했던 내 자신과 비교하면 그래도 많이 늘었다! 게속 열심히 공부해보즈앗</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>후위연산식(postfix)</title>
    <url>/2022/221014-archive/</url>
    <content><![CDATA[<h2 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h2><p>후위연산식이 주어지면 연산한 결과를 출력하는 프로그램을 작성하세요.</p>
<p>만약 3*(5+2)-9 을 후위연산식으로 표현하면 352+*9- 로 표현되며 그 결과는 12입니다.</p>
<h3 id="입력"><a href="#입력" class="headerlink" title="입력"></a>입력</h3><p>첫 줄에 후위연산식이 주어집니다. 연산식의 길이는 50을 넘지 않습니다. </p>
<p>식은 1~9의 숫자와 +, -, *, &#x2F; 연산자로만 이루어진다.</p>
<h3 id="출력"><a href="#출력" class="headerlink" title="출력"></a>출력</h3><p>연산한 결과를 출력합니다.</p>
<h3 id="예제입력"><a href="#예제입력" class="headerlink" title="예제입력"></a>예제입력</h3><p>▣ 입력예제 1 </p>
<p>352+*9-</p>
<p>▣ 출력예제 1 </p>
<p>12</p>
<hr>
<h2 id="🙌🏻-문제-이해하기"><a href="#🙌🏻-문제-이해하기" class="headerlink" title="🙌🏻 문제 이해하기"></a>🙌🏻 문제 이해하기</h2><p>문제를 해결하기 위해 어떤 방법을 사용해야하는지 생각해보자 :)</p>
<ol>
<li>문자열로 받은 argument를 하나씩 확인해야한다. ➡️ split 메서드 사용하여 배열로 만들기</li>
<li>반복문으로 순회를 하면서 숫자를 만나면 stack에 넣는다. </li>
<li>연산자를 만나면 stack에서 2개의 값을 꺼내 계산한다. </li>
<li>계산한 값을 다시 stack에 넣는다. </li>
<li>반복문이 종료되었을 때 계산된 값을 반환한다.</li>
</ol>
<h2 id="✅-solution"><a href="#✅-solution" class="headerlink" title="✅ solution"></a>✅ solution</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">let</span> array = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(item)) stack.<span class="title function_">push</span>(<span class="title class_">Number</span>(item));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> right = stack.<span class="title function_">pop</span>();</span><br><span class="line">      <span class="keyword">let</span> left = stack.<span class="title function_">pop</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (item) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left * right);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left + right);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left - right);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> stack.<span class="title function_">push</span>(left / right);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Number</span>(stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">solution</span>(<span class="string">&quot;352+*9-&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>이번 문제는 어떻게 풀지만 알고 있으면 쉽게 구현할 수 있는 문제인 것 같았다. </p>
<p>풀면서 오류를 범했던 것이 있다면 stack에 넣을 값을 숫자로 변환하지 않고 그대로 넣어서 결과값이 147이 나와 깜짝 놀랬다는 것… (앗차차 나의 실수😃)</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Alogrithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, World!</title>
    <url>/2022/hello-world-0/</url>
    <content><![CDATA[<h2 id="🙌-안녕-GitHub-블로그"><a href="#🙌-안녕-GitHub-블로그" class="headerlink" title="🙌 안녕, GitHub 블로그!"></a>🙌 안녕, GitHub 블로그!</h2><p>여태 Notion으로 공부한 내용을 정리하다가 github 블로그로 넘어오게되었다.<br>그 이유는.. 모두에게 공개되는 github에 글을 작성했을 때, 더 신중하게 작성할 수 &gt;있을 것이라는 생각에 바로 github으로 변경했다.</p>
<h3 id="📒-영어공부의-필요성을-느끼는-중입니다"><a href="#📒-영어공부의-필요성을-느끼는-중입니다" class="headerlink" title="📒 영어공부의 필요성을 느끼는 중입니다."></a>📒 영어공부의 필요성을 느끼는 중입니다.</h3><p>최근 공부를 하면서 모르는 개념이 생길 때마다 공식 문서를 찾아보는데 문서를 볼 때마다 제대로 된 이해를 하지 못하는 것 같은 느낌이 들었다. 개발 관련된 단어라도 알고 있으면 이해가 수월하지 않을까? 라는 생각이 드는 찰나에 meot님의 개발 용어 레포지토리를 찾았다! 이것부터 차근차근 열심히 영어공부를 해보자..!</p>
<h3 id="✨-공부한-내용-기록하기"><a href="#✨-공부한-내용-기록하기" class="headerlink" title="✨ 공부한 내용 기록하기"></a>✨ 공부한 내용 기록하기</h3><p>TIL 이외의 내용들은 모두 이 곳에 기록해두자.<br>아직 미완성된 블로그이지만 글도 많이 쌓이고 기능도 조금씩 고쳐나가면 좋은 블로그가 되지 않을까:)<br>~<br>~-</p>
]]></content>
      <tags>
        <tag>IT</tag>
        <tag>Web</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
</search>
