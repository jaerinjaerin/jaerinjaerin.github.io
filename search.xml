<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1부터 N까지의 원소를 갖는 집합의 부분집합 구하기</title>
    <url>/2022/221007-archive/</url>
    <content><![CDATA[<h2 id="✏️-문제"><a href="#✏️-문제" class="headerlink" title="✏️  문제"></a>✏️  문제</h2><p>자연수 N이 주어지면 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력하는 프로그램을 작성하세요.</p>
<p>입력설명<br>첫 번째 줄에 자연수 N(1 ≤ N ≤ 10)이 주어집니다. </p>
<p>출력 설명<br>첫 번째 줄부터 각 줄에 하나씩 부분집합을 출력예제와 같은 순서로 출력한다.</p>
<p>입력 예제</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>출력 예제</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>


<h3 id="👉-부분-집합을-구하는-문제"><a href="#👉-부분-집합을-구하는-문제" class="headerlink" title="👉 부분 집합을 구하는 문제"></a>👉 부분 집합을 구하는 문제</h3><p>1을 방문을 할 지 안 할지 2가지 선택, 2를 방문을 할 지 안 할지 2가지 선택, 3을 방문을 할 지 안 할지 2가지 선택<br>➡️  총 8가지의 트리가 만들어진다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">상태트리</span><br><span class="line"></span><br><span class="line">부분집합의 개수 <span class="number">2</span> ^ x - <span class="number">1</span> (공집합 제외)</span><br><span class="line">집합에 원소가 들어갈지 안들어갈지 선택한다.</span><br><span class="line"></span><br><span class="line"><span class="title function_">D</span>(<span class="number">1</span>) -&gt; O -&gt; <span class="title function_">D</span>(<span class="number">2</span>) -&gt; o -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">                  -&gt; x -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">     -&gt; X -&gt; <span class="title function_">D</span>(<span class="number">2</span>) -&gt; o -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br><span class="line">                  -&gt; x -&gt; <span class="title function_">D</span>(<span class="number">3</span>) -&gt; o</span><br><span class="line">                               -&gt; x</span><br></pre></td></tr></table></figure>

<p>문제에서 1부터 N까지의 원소를 갖는 부분집합을 구하라고 했기 때문에, 1부터 N까지의 길이에 0을 담은 체크 배열을 만들어준다.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> checkArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>이제 Head 노드에서부터 노드를 방문하면서, 해당 노드를 포함할 것인지 확인하고, 부분 집합을 찾아준다.</p>
<p>(내가 만든 부분 집합에 참여시키고 참여시키지않는 것을 확인 후 배열에 하나씩 담아주면 된다.)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === n + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 1로 들어온 것들만 출력하기</span></span><br><span class="line">        <span class="keyword">if</span> (checkArray[i] === <span class="number">1</span>) temp += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">length</span> &gt;= <span class="number">1</span>) answer.<span class="title function_">push</span>(temp.<span class="title function_">trim</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 집합에 포함시킨다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 집합에 포함시키지 않는다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">0</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<h3 id="👉-DFS-함수를-잘-살펴보자"><a href="#👉-DFS-함수를-잘-살펴보자" class="headerlink" title="👉  DFS 함수를 잘 살펴보자"></a>👉  DFS 함수를 잘 살펴보자</h3><ol>
<li>부분집합이 주어진 배열의 길이를 넘어갈 수는 없으므로, depth가 배열의 길이와 같다면 재귀를 멈추고, 1로 들어온 인덱스만 출력한다.</li>
<li>depth가 아직 배열의 길이에 도달하지 않으면, 자기 자식 노드를 선택하는 경우와 그렇지 않은 경우를 만들고, 자식을 호출하여 부분집합을 찾아간다.</li>
</ol>
<h3 id="✅-전체-코드"><a href="#✅-전체-코드" class="headerlink" title="✅ 전체 코드"></a>✅ 전체 코드</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [];</span><br><span class="line">  <span class="keyword">let</span> checkArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: n + <span class="number">1</span> &#125;, <span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">DFS</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth === n + <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 1로 들어온 것들만 출력하기</span></span><br><span class="line">        <span class="keyword">if</span> (checkArray[i] === <span class="number">1</span>) temp += i + <span class="string">&quot; &quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (temp.<span class="property">length</span> &gt;= <span class="number">1</span>) answer.<span class="title function_">push</span>(temp.<span class="title function_">trim</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 집합에 포함시킨다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">1</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 집합에 포함시키지 않는다.</span></span><br><span class="line">      checkArray[depth] = <span class="number">0</span>;</span><br><span class="line">      <span class="title function_">DFS</span>(depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">DFS</span>(<span class="number">1</span>); <span class="comment">// DFS는 1부터 시작한다.</span></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="😎-Review"><a href="#😎-Review" class="headerlink" title="😎 Review"></a>😎 Review</h2><p>DFS를 사용하려면 재귀함수가 기본적인 지식으로 깔려 있어야하는 것 같다. 재귀함수를 배웠다고 생각했는데 막상 그것도 아닌가보다. 😟 DFS가 실행되는 과정에 대해서 더 이해하는 과정이 필요할 것 같다. 부분집합을 구하라는 문제를 봤을 때, 어떻게 구해야하지 라고 생각하다가 가지치기 형식으로 그림을 그리다보니 이진트리 형태로 나오는 것을 보면서 이러면 이진트리로 접근해야겠다. 라는 생각이 들었던 것만으로도 오늘은 성공인것 같다!</p>
]]></content>
      <tags>
        <tag>Algorithm</tag>
        <tag>JavaSript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, World!</title>
    <url>/2022/hello-world-0/</url>
    <content><![CDATA[<h2 id="🙌-안녕-GitHub-블로그"><a href="#🙌-안녕-GitHub-블로그" class="headerlink" title="🙌 안녕, GitHub 블로그!"></a>🙌 안녕, GitHub 블로그!</h2><p>여태 Notion으로 공부한 내용을 정리하다가 github 블로그로 넘어오게되었다.<br>그 이유는.. 모두에게 공개되는 github에 글을 작성했을 때, 더 신중하게 작성할 수 &gt;있을 것이라는 생각에 바로 github으로 변경했다.</p>
<h3 id="📒-영어공부의-필요성을-느끼는-중입니다"><a href="#📒-영어공부의-필요성을-느끼는-중입니다" class="headerlink" title="📒 영어공부의 필요성을 느끼는 중입니다."></a>📒 영어공부의 필요성을 느끼는 중입니다.</h3><p>최근 공부를 하면서 모르는 개념이 생길 때마다 공식 문서를 찾아보는데 문서를 볼 때마다 제대로 된 이해를 하지 못하는 것 같은 느낌이 들었다. 개발 관련된 단어라도 알고 있으면 이해가 수월하지 않을까? 라는 생각이 드는 찰나에 meot님의 개발 용어 레포지토리를 찾았다! 이것부터 차근차근 열심히 영어공부를 해보자..!</p>
<h3 id="✨-공부한-내용-기록하기"><a href="#✨-공부한-내용-기록하기" class="headerlink" title="✨ 공부한 내용 기록하기"></a>✨ 공부한 내용 기록하기</h3><p>TIL 이외의 내용들은 모두 이 곳에 기록해두자.<br>아직 미완성된 블로그이지만 글도 많이 쌓이고 기능도 조금씩 고쳐나가면 좋은 블로그가 되지 않을까:)<br>~<br>~-</p>
]]></content>
      <tags>
        <tag>IT</tag>
        <tag>Web</tag>
        <tag>Frontend</tag>
      </tags>
  </entry>
</search>
